/*
 * (C) Copyright IBM Corp. 2004
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  This
 * file and program are licensed under a BSD style license.  See
 * the Copying file included with the OpenHPI distribution for
 * full licensing terms.
 *
 * Authors:
 *   Konrad Rzeszutek <konradr@us.ibm.com>

 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.18 2003/11/07 17:03:52 rstory Exp $
 *
 * $Id$
 *
 */
#ifndef SAHPISENSORREADINGNORMALMAXTABLE_H
#define SAHPISENSORREADINGNORMALMAXTABLE_H

#ifdef __cplusplus
extern "C"
{
#endif


#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>
#include <SaHpi.h>
#include <hpiSubagent.h>


	/** Index saHpiDomainID is external */
	/** Index saHpiResourceID is external */
	/** Index saHpiSensorIndex is external */

  typedef struct saHpiSensorReadingNormalMaxTable_context_s
  {
    netsnmp_index index;
	/** INTEGER = ASN_INTEGER */
    long saHpiSensorReadingNormalMaxValuesPresent;

	/** UNSIGNED32 = ASN_UNSIGNED */
    unsigned long saHpiSensorReadingNormalMaxRaw;

	/** OCTETSTR = ASN_OCTET_STR */
    unsigned char
      saHpiSensorReadingNormalMaxInterpreted[SENSOR_READING_INTER_MAX];
    size_t saHpiSensorReadingNormalMaxInterpreted_len;

	/** INTEGER = ASN_INTEGER */
    long saHpiSensorReadingNormalMaxStatus;

	/** OCTETSTR = ASN_OCTET_STR */
    unsigned char
      saHpiSensorReadingNormalMaxEventStatus[SENSOR_READING_EVENT_MAX];
    size_t saHpiSensorReadingNormalMaxEventStatus_len;

    long sensor_id;
    long resource_id;
    long domain_id;
    long hash;


  } saHpiSensorReadingNormalMaxTable_context;

/*************************************************************
 * function declarations
 */

  void initialize_table_saHpiSensorReadingNormalMaxTable (void);

  int
    delete_ReadingNormalMax_row (SaHpiDomainIdT domain_id,
			       SaHpiResourceIdT resource_id,
			       SaHpiSensorNumT num);

  int populate_ReadingNormalMax (SaHpiDomainIdT domain_id,
			       SaHpiResourceIdT resource_id,
			       SaHpiSensorNumT sensor_id,
			       SaHpiEventCategoryT sensor_category,
			       SaHpiSensorReadingT * reading);


  int
    saHpiSensorReadingNormalMaxTable_get_value (netsnmp_request_info *,
					      netsnmp_index *,
					      netsnmp_table_request_info *);


/*************************************************************
 * oid declarations
 */
  extern oid saHpiSensorReadingNormalMaxTable_oid[];
  extern size_t saHpiSensorReadingNormalMaxTable_oid_len;

#define saHpiSensorReadingNormalMaxTable_TABLE_OID hpiSensor_OID,5

/*************************************************************
 * column number definitions for table saHpiSensorReadingNormalMaxTable
 */
#define COLUMN_SAHPISENSORREADINGNORMALMAXVALUESPRESENT 1
#define COLUMN_SAHPISENSORREADINGNORMALMAXRAW 2
#define COLUMN_SAHPISENSORREADINGNORMALMAXINTERPRETED 3
#define COLUMN_SAHPISENSORREADINGNORMALMAXSTATUS 4
#define COLUMN_SAHPISENSORREADINGNORMALMAXEVENTSTATUS 5
#define saHpiSensorReadingNormalMaxTable_COL_MIN 1
#define saHpiSensorReadingNormalMaxTable_COL_MAX 5

  int
    saHpiSensorReadingNormalMaxTable_extract_index
    (saHpiSensorReadingNormalMaxTable_context * ctx, netsnmp_index * hdr);

  void saHpiSensorReadingNormalMaxTable_set_reserve1 (netsnmp_request_group *);
  void saHpiSensorReadingNormalMaxTable_set_reserve2 (netsnmp_request_group *);
  void saHpiSensorReadingNormalMaxTable_set_action (netsnmp_request_group *);
  void saHpiSensorReadingNormalMaxTable_set_commit (netsnmp_request_group *);
  void saHpiSensorReadingNormalMaxTable_set_free (netsnmp_request_group *);
  void saHpiSensorReadingNormalMaxTable_set_undo (netsnmp_request_group *);

    saHpiSensorReadingNormalMaxTable_context
    * saHpiSensorReadingNormalMaxTable_duplicate_row
    (saHpiSensorReadingNormalMaxTable_context *);
    netsnmp_index
    * saHpiSensorReadingNormalMaxTable_delete_row
    (saHpiSensorReadingNormalMaxTable_context *);

  int
    saHpiSensorReadingNormalMaxTable_can_delete
    (saHpiSensorReadingNormalMaxTable_context * undo_ctx,
     saHpiSensorReadingNormalMaxTable_context * row_ctx,
     netsnmp_request_group * rg);



    saHpiSensorReadingNormalMaxTable_context
    * saHpiSensorReadingNormalMaxTable_create_row (netsnmp_index *);

#ifdef __cplusplus
};
#endif

#endif /** SAHPISENSORREADINGNORMALMAXTABLE_H */
