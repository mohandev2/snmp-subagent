/*
 * (C) Copyright IBM Corp. 2005
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  This
 * file and program are licensed under a BSD style license.  See
 * the Copying file included with the OpenHPI distribution for
 * full licensing terms.
 *
 * Authors:
 *   David Judkovics  <djudkovi@us.ibm.com>
 *   Daniel de Araujo <ddearauj@us.ibm.com>
 *
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.18.2.2 2004/02/09 18:21:47 rstory Exp $
 *
 * $Id$
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef SAHPISENSORTHDUPCRITICALTABLE_H
#define SAHPISENSORTHDUPCRITICALTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

/** Index saHpiDomainId is external */
/** Index saHpiResourceId is external */
/** Index saHpiResourceIsHistorical is external */
/** Index saHpiSensorNum is external */

typedef struct saHpiSensorThdUpCriticalTable_context_s {
        netsnmp_index index; /** THIS MUST BE FIRST!!! */

        /*************************************************************
         * You can store data internally in this structure.
         *
         * TODO: You will probably have to fix a few types here...
         */
        /** TODO: add storage for external index(s)! */
        /** TruthValue = ASN_INTEGER */
        long saHpiSensorThdUpCriticalIsReadable;

        /** TruthValue = ASN_INTEGER */
        long saHpiSensorThdUpCriticalIsWritable;

        /** SaHpiSensorReadingType = ASN_INTEGER */
        long saHpiSensorThdUpCriticalType;

        /** SaHpiSensorReadingValue = ASN_OCTET_STR */
        unsigned char saHpiSensorThdUpCriticalValue[SAHPI_SENSOR_BUFFER_LENGTH];
        long saHpiSensorThdUpCriticalValue_len;

        /** TruthValue = ASN_INTEGER */
        long saHpiSensorThdUpCriticalNonLinear;


        /*
         * OR
         *
         * Keep a pointer to your data
         */
        void * data;

        /*
         *add anything else you want here
         */

} saHpiSensorThdUpCriticalTable_context;

/*************************************************************
 * funtions
 */
SaErrorT populate_sen_thd_up_crit(SaHpiSessionIdT sessionid, 
                                          SaHpiRdrT *rdr_entry,
                                          SaHpiRptEntryT *rpt_entry,
                                          SaHpiSensorThresholdsT *sensor_thresholds);
SaErrorT clear_sen_thd_up_crit(SaHpiDomainIdT domainId, 
                               SaHpiResourceIdT resourceId);
int set_table_sen_thds_up_crit (saHpiSensorThdUpCriticalTable_context *row_ctx);

/*************************************************************
 * function declarations
 */
void init_saHpiSensorThdUpCriticalTable(void);
void initialize_table_saHpiSensorThdUpCriticalTable(void);
const saHpiSensorThdUpCriticalTable_context * saHpiSensorThdUpCriticalTable_get_by_idx(netsnmp_index *);
const saHpiSensorThdUpCriticalTable_context * saHpiSensorThdUpCriticalTable_get_by_idx_rs(netsnmp_index *,
                                                                                          int row_status);
int saHpiSensorThdUpCriticalTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);


/*************************************************************
 * oid declarations
 */
extern oid saHpiSensorThdUpCriticalTable_oid[];
extern size_t saHpiSensorThdUpCriticalTable_oid_len;

#define saHpiSensorThdUpCriticalTable_TABLE_OID 1,3,6,1,4,1,18568,2,1,1,4,9,12

/* Number of table Indexes */
#define SEN_THD_UP_CRIT_IDX_NR 4
#define saHpiThdUpCritDomainId_INDEX 0
#define saHpiThdUpCritResourceEntryId_INDEX 1
#define saHpiThdUpCritResourceIsHistorical_INDEX 2
#define saHpiSensorThdUpCritNum_INDEX 3

/*************************************************************
 * column number definitions for table saHpiSensorThdUpCriticalTable
 */
#define COLUMN_SAHPISENSORTHDUPCRITICALISREADABLE 1
#define COLUMN_SAHPISENSORTHDUPCRITICALISWRITABLE 2
#define COLUMN_SAHPISENSORTHDUPCRITICALTYPE 3
#define COLUMN_SAHPISENSORTHDUPCRITICALVALUE 4
#define COLUMN_SAHPISENSORTHDUPCRITICALNONLINEAR 5
#define saHpiSensorThdUpCriticalTable_COL_MIN 1
#define saHpiSensorThdUpCriticalTable_COL_MAX 5

int saHpiSensorThdUpCriticalTable_extract_index( saHpiSensorThdUpCriticalTable_context * ctx, netsnmp_index * hdr );

void saHpiSensorThdUpCriticalTable_set_reserve1( netsnmp_request_group * );
void saHpiSensorThdUpCriticalTable_set_reserve2( netsnmp_request_group * );
void saHpiSensorThdUpCriticalTable_set_action( netsnmp_request_group * );
void saHpiSensorThdUpCriticalTable_set_commit( netsnmp_request_group * );
void saHpiSensorThdUpCriticalTable_set_free( netsnmp_request_group * );
void saHpiSensorThdUpCriticalTable_set_undo( netsnmp_request_group * );

saHpiSensorThdUpCriticalTable_context * saHpiSensorThdUpCriticalTable_duplicate_row( saHpiSensorThdUpCriticalTable_context* );
netsnmp_index * saHpiSensorThdUpCriticalTable_delete_row( saHpiSensorThdUpCriticalTable_context* );

int saHpiSensorThdUpCriticalTable_can_activate(saHpiSensorThdUpCriticalTable_context *undo_ctx,
                                               saHpiSensorThdUpCriticalTable_context *row_ctx,
                                               netsnmp_request_group * rg);
int saHpiSensorThdUpCriticalTable_can_deactivate(saHpiSensorThdUpCriticalTable_context *undo_ctx,
                                                 saHpiSensorThdUpCriticalTable_context *row_ctx,
                                                 netsnmp_request_group * rg);
int saHpiSensorThdUpCriticalTable_can_delete(saHpiSensorThdUpCriticalTable_context *undo_ctx,
                                             saHpiSensorThdUpCriticalTable_context *row_ctx,
                                             netsnmp_request_group * rg);


saHpiSensorThdUpCriticalTable_context * saHpiSensorThdUpCriticalTable_create_row( netsnmp_index* );

saHpiSensorThdUpCriticalTable_context * saHpiSensorThdUpCriticalTable_get( const char *name, int len );

#ifdef __cplusplus
};
#endif

#endif /** SAHPISENSORTHDUPCRITICALTABLE_H */
