/*
 * (C) Copyright IBM Corp. 2005
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  This
 * file and program are licensed under a BSD style license.  See
 * the Copying file included with the OpenHPI distribution for
 * full licensing terms.
 *
 * Authors:
 *   David Judkovics  <djudkovi@us.ibm.com>
 *   Daniel de Araujo <ddearauj@us.ibm.com>
 *
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.18.2.2 2004/02/09 18:21:47 rstory Exp $
 *
 * $Id$
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef SAHPICTRLTEXTTABLE_H
#define SAHPICTRLTEXTTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

	/** Index saHpiDomainId is external */
	/** Index saHpiResourceId is external */
	/** Index saHpiResourceIsHistorical is external */
	/** Index saHpiCtrlTextEntryId is internal */

	typedef struct saHpiCtrlTextTable_context_s {
		netsnmp_index index; /** THIS MUST BE FIRST!!! */

		/*************************************************************
		 * You can store data internally in this structure.
		 *
		 * TODO: You will probably have to fix a few types here...
		 */
		/** TODO: add storage for external index(s)! */
		/** SaHpiEntryId = ASN_UNSIGNED */
		unsigned long saHpiCtrlTextEntryId;

		/** SaHpiInstrumentId = ASN_UNSIGNED */
		unsigned long saHpiCtrlTextNum;

		/** SaHpiCtrlOutputType = ASN_INTEGER */
		long saHpiCtrlTextOutputType;

		/** SaHpiCtrlMode = ASN_INTEGER */
		long saHpiCtrlTextDefaultMode;

		/** SaHpiCtrlMode = ASN_INTEGER */
		long saHpiCtrlTextMode;

		/** TruthValue = ASN_INTEGER */
		long saHpiCtrlTextIsReadOnly;

		/** TruthValue = ASN_INTEGER */
		long saHpiCtrlTextIsWriteOnly;

		/** Unsigned8 = ASN_INTEGER */
		long saHpiCtrlTextMaxChars;

		/** Unsigned8 = ASN_INTEGER */
		long saHpiCtrlTextMaxLines;

		/** SaHpiTextLanguage = ASN_INTEGER */
		long saHpiCtrlTextLanguage;

		/** SaHpiTextType = ASN_INTEGER */
		long saHpiCtrlTextType;

		/** Unsigned8 = ASN_INTEGER */
		long saHpiCtrlTextDefaultLine;

		/** SaHpiText = ASN_OCTET_STR */
		unsigned char saHpiCtrlTextDefault[SAHPI_MAX_TEXT_BUFFER_LENGTH];
		long saHpiCtrlTextDefault_len;

		/** Unsigned8 = ASN_INTEGER */
		long saHpiCtrlTextLine;

		/** SaHpiText = ASN_OCTET_STR */
		unsigned char saHpiCtrlTextState[SAHPI_MAX_TEXT_BUFFER_LENGTH];
		long saHpiCtrlTextState_len;

		/** UNSIGNED32 = ASN_UNSIGNED */
		unsigned long saHpiCtrlTextOem;

		/** RowPointer = ASN_OBJECT_ID */
		oid saHpiCtrlTextRDR[MAX_OID_LEN];
		long saHpiCtrlTextRDR_len;


		/*
		 * OR
		 *
		 * Keep a pointer to your data
		 */
		void * data;

		/*
		 *add anything else you want here
		 */

	} saHpiCtrlTextTable_context;

/*************************************************************
 * set funtions
 */
int set_table_ctrl_text (saHpiCtrlTextTable_context *row_ctx);


/*************************************************************
 * function declarations
 */
SaErrorT populate_ctrl_text(SaHpiSessionIdT sessionid, 
			    SaHpiRdrT *rdr_entry,
			    SaHpiRptEntryT *rpt_entry,
			    oid *full_oid, size_t full_oid_len,
			    oid *child_oid, size_t *child_oid_len);
SaErrorT clear_ctrl_text(SaHpiDomainIdT domainId, 
                         SaHpiResourceIdT resourceId);


/*************************************************************
 * function declarations
 */
void init_saHpiCtrlTextTable(void);
void initialize_table_saHpiCtrlTextTable(void);
const saHpiCtrlTextTable_context * saHpiCtrlTextTable_get_by_idx(netsnmp_index *);
const saHpiCtrlTextTable_context * saHpiCtrlTextTable_get_by_idx_rs(netsnmp_index *,
								    int row_status);
int saHpiCtrlTextTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);


/*************************************************************
 * oid declarations
 */
extern oid saHpiCtrlTextTable_oid[];
extern size_t saHpiCtrlTextTable_oid_len;

#define saHpiCtrlTextTable_TABLE_OID 1,3,6,1,4,1,18568,2,1,1,4,7,11

/* Number of table Indexes */
#define CTRL_TEXT_INDEX_NR 4 
#define saHpiCtrlTextDomainId_INDEX 0
#define saHpiCtrlTextResourceEntryId_INDEX 1
#define saHpiCtrlTextResourceIsHistorical_INDEX 2
#define saHpiCtrlTextEntryId_INDEX 3

/*************************************************************
 * column number definitions for table saHpiCtrlTextTable
 */
#define COLUMN_SAHPICTRLTEXTENTRYID 1
#define COLUMN_SAHPICTRLTEXTNUM 2
#define COLUMN_SAHPICTRLTEXTOUTPUTTYPE 3
#define COLUMN_SAHPICTRLTEXTDEFAULTMODE 4
#define COLUMN_SAHPICTRLTEXTMODE 5
#define COLUMN_SAHPICTRLTEXTISREADONLY 6
#define COLUMN_SAHPICTRLTEXTISWRITEONLY 7
#define COLUMN_SAHPICTRLTEXTMAXCHARS 8
#define COLUMN_SAHPICTRLTEXTMAXLINES 9
#define COLUMN_SAHPICTRLTEXTLANGUAGE 10
#define COLUMN_SAHPICTRLTEXTTYPE 11
#define COLUMN_SAHPICTRLTEXTDEFAULTLINE 12
#define COLUMN_SAHPICTRLTEXTDEFAULT 13
#define COLUMN_SAHPICTRLTEXTLINE 14
#define COLUMN_SAHPICTRLTEXTSTATE 15
#define COLUMN_SAHPICTRLTEXTOEM 16
#define COLUMN_SAHPICTRLTEXTRDR 17
#define saHpiCtrlTextTable_COL_MIN 2
#define saHpiCtrlTextTable_COL_MAX 17

/* comment out the following line if you don't handle SET-REQUEST for saHpiCtrlTextTable */
#define saHpiCtrlTextTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define saHpiCtrlTextTable_ROW_CREATION

/* comment out the following line if you don't want the secondary index */
#define saHpiCtrlTextTable_IDX2

/* uncommend the following line if you allow modifications to an
 * active row */
/** define saHpiCtrlTextTable_CAN_MODIFY_ACTIVE_ROW */

#ifdef saHpiCtrlTextTable_SET_HANDLING

int saHpiCtrlTextTable_extract_index( saHpiCtrlTextTable_context * ctx, netsnmp_index * hdr );

void saHpiCtrlTextTable_set_reserve1( netsnmp_request_group * );
void saHpiCtrlTextTable_set_reserve2( netsnmp_request_group * );
void saHpiCtrlTextTable_set_action( netsnmp_request_group * );
void saHpiCtrlTextTable_set_commit( netsnmp_request_group * );
void saHpiCtrlTextTable_set_free( netsnmp_request_group * );
void saHpiCtrlTextTable_set_undo( netsnmp_request_group * );

saHpiCtrlTextTable_context * saHpiCtrlTextTable_duplicate_row( saHpiCtrlTextTable_context* );
netsnmp_index * saHpiCtrlTextTable_delete_row( saHpiCtrlTextTable_context* );

int saHpiCtrlTextTable_can_activate(saHpiCtrlTextTable_context *undo_ctx,
				    saHpiCtrlTextTable_context *row_ctx,
				    netsnmp_request_group * rg);
int saHpiCtrlTextTable_can_deactivate(saHpiCtrlTextTable_context *undo_ctx,
				      saHpiCtrlTextTable_context *row_ctx,
				      netsnmp_request_group * rg);
int saHpiCtrlTextTable_can_delete(saHpiCtrlTextTable_context *undo_ctx,
					  saHpiCtrlTextTable_context *row_ctx,
					  netsnmp_request_group * rg);


#ifdef saHpiCtrlTextTable_ROW_CREATION
	saHpiCtrlTextTable_context * saHpiCtrlTextTable_create_row( netsnmp_index* );
#endif
#endif

#ifdef saHpiCtrlTextTable_IDX2
	saHpiCtrlTextTable_context * saHpiCtrlTextTable_get( const char *name, int len );
#endif

#ifdef __cplusplus
};
#endif

#endif /** SAHPICTRLTEXTTABLE_H */
