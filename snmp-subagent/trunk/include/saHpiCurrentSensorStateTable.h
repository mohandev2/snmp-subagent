/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.18.2.2 2004/02/09 18:21:47 rstory Exp $
 *
 * $Id$
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef SAHPICURRENTSENSORSTATETABLE_H
#define SAHPICURRENTSENSORSTATETABLE_H

#ifdef __cplusplus
extern "C" {
#endif

    
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

        /** Index saHpiDomainId is external */
        /** Index saHpiResourceId is external */
        /** Index saHpiSensorNum is external */

typedef struct saHpiCurrentSensorStateTable_context_s {
    netsnmp_index index; /** THIS MUST BE FIRST!!! */

    /*************************************************************
     * You can store data internally in this structure.
     *
     * TODO: You will probably have to fix a few types here...
     */
    /** TODO: add storage for external index(s)! */
        /** INTEGER = ASN_INTEGER */
            long saHpiCurrentSensorStateDataPresent;

        /** SaHpiSensorReadingType = ASN_INTEGER */
            long saHpiCurrentSensorStateType;

        /** SaHpiSensorReadingValue = ASN_OCTET_STR */
            unsigned char saHpiCurrentSensorStateValue[SAHPI_SENSOR_BUFFER_LENGTH];
            long saHpiCurrentSensorStateValue_len;

        /** SaHpiEventState = ASN_OCTET_STR */
            unsigned char saHpiCurrentSensorStateEventState[SAHPI_MAX_TEXT_BUFFER_LENGTH];
            long saHpiCurrentSensorStateEventState_len;

        /** TruthValue = ASN_INTEGER */
            long saHpiCurrentSensorStateSensorEnable;

        /** TruthValue = ASN_INTEGER */
            long saHpiCurrentSensorStateEventEnable;

        /** SaHpiEventState = ASN_OCTET_STR */
            unsigned char saHpiCurrentSensorStateAssertAddEventMask[SAHPI_MAX_TEXT_BUFFER_LENGTH];
            long saHpiCurrentSensorStateAssertAddEventMask_len;

        /** SaHpiEventState = ASN_OCTET_STR */
            unsigned char saHpiCurrentSensorStateAssertRemoveEventMask[SAHPI_MAX_TEXT_BUFFER_LENGTH];
            long saHpiCurrentSensorStateAssertRemoveEventMask_len;

        /** SaHpiEventState = ASN_OCTET_STR */
            unsigned char saHpiCurrentSensorStateDeassertAddEventMask[SAHPI_MAX_TEXT_BUFFER_LENGTH];
            long saHpiCurrentSensorStateDeassertAddEventMask_len;

        /** SaHpiEventState = ASN_OCTET_STR */
            unsigned char saHpiCurrentSensorStateDeassertRemoveEventMask[SAHPI_MAX_TEXT_BUFFER_LENGTH];
            long saHpiCurrentSensorStateDeassertRemoveEventMask_len;


    /*
     * OR
     *
     * Keep a pointer to your data
     */
    void * data;

    /*
     *add anything else you want here
     */

} saHpiCurrentSensorStateTable_context;

/*************************************************************
 * set funtions
 */
int set_table_sensor_enable (saHpiCurrentSensorStateTable_context *row_ctx);
int set_table_sensor_event_enable (saHpiCurrentSensorStateTable_context *row_ctx);
int set_table_sensor_masks (saHpiCurrentSensorStateTable_context *row_ctx,
			    int column);

/*************************************************************
 * function declarations
 */
SaErrorT populate_current_sensor_state(SaHpiSessionIdT sessionid, 
				       SaHpiRdrT *rdr_entry,
				       SaHpiRptEntryT *rpt_entry,
				       oid *full_oid, size_t full_oid_len);
SaErrorT clear_current_sensor_state(SaHpiDomainIdT domainId, 
                                    SaHpiResourceIdT resourceId);


/*************************************************************
 * function declarations
 */
void init_saHpiCurrentSensorStateTable(void);
void initialize_table_saHpiCurrentSensorStateTable(void);
const saHpiCurrentSensorStateTable_context * saHpiCurrentSensorStateTable_get_by_idx(netsnmp_index *);
const saHpiCurrentSensorStateTable_context * saHpiCurrentSensorStateTable_get_by_idx_rs(netsnmp_index *,
                                        int row_status);
int saHpiCurrentSensorStateTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);


/*************************************************************
 * oid declarations
 */
extern oid saHpiCurrentSensorStateTable_oid[];
extern size_t saHpiCurrentSensorStateTable_oid_len;

#define saHpiCurrentSensorStateTable_TABLE_OID 1,3,6,1,4,1,18568,2,1,1,4,9,3

/* Number of table Indexes */
#define CURRENT_SENSOR_STATE_INDEX_NR 3
#define saHpiDomainId_INDEX 0
#define saHpiResourceEntryId_INDEX 1
#define saHpiSensorNumCurrent_INDEX 2
    
/*************************************************************
 * column number definitions for table saHpiCurrentSensorStateTable
 */
#define COLUMN_SAHPICURRENTSENSORSTATEDATAPRESENT 1
#define COLUMN_SAHPICURRENTSENSORSTATETYPE 2
#define COLUMN_SAHPICURRENTSENSORSTATEVALUE 3
#define COLUMN_SAHPICURRENTSENSORSTATEEVENTSTATE 4
#define COLUMN_SAHPICURRENTSENSORSTATESENSORENABLE 5
#define COLUMN_SAHPICURRENTSENSORSTATEEVENTENABLE 6
#define COLUMN_SAHPICURRENTSENSORSTATEASSERTADDEVENTMASK 7
#define COLUMN_SAHPICURRENTSENSORSTATEASSERTREMOVEEVENTMASK 8
#define COLUMN_SAHPICURRENTSENSORSTATEDEASSERTADDEVENTMASK 9
#define COLUMN_SAHPICURRENTSENSORSTATEDEASSERTREMOVEEVENTMASK 10
#define saHpiCurrentSensorStateTable_COL_MIN 1
#define saHpiCurrentSensorStateTable_COL_MAX 10

int saHpiCurrentSensorStateTable_extract_index( saHpiCurrentSensorStateTable_context * ctx, netsnmp_index * hdr );

void saHpiCurrentSensorStateTable_set_reserve1( netsnmp_request_group * );
void saHpiCurrentSensorStateTable_set_reserve2( netsnmp_request_group * );
void saHpiCurrentSensorStateTable_set_action( netsnmp_request_group * );
void saHpiCurrentSensorStateTable_set_commit( netsnmp_request_group * );
void saHpiCurrentSensorStateTable_set_free( netsnmp_request_group * );
void saHpiCurrentSensorStateTable_set_undo( netsnmp_request_group * );

saHpiCurrentSensorStateTable_context * saHpiCurrentSensorStateTable_duplicate_row( saHpiCurrentSensorStateTable_context* );
netsnmp_index * saHpiCurrentSensorStateTable_delete_row( saHpiCurrentSensorStateTable_context* );

int saHpiCurrentSensorStateTable_can_activate(saHpiCurrentSensorStateTable_context *undo_ctx,
                      saHpiCurrentSensorStateTable_context *row_ctx,
                      netsnmp_request_group * rg);
int saHpiCurrentSensorStateTable_can_deactivate(saHpiCurrentSensorStateTable_context *undo_ctx,
                        saHpiCurrentSensorStateTable_context *row_ctx,
                        netsnmp_request_group * rg);
int saHpiCurrentSensorStateTable_can_delete(saHpiCurrentSensorStateTable_context *undo_ctx,
                    saHpiCurrentSensorStateTable_context *row_ctx,
                    netsnmp_request_group * rg);
    
    
saHpiCurrentSensorStateTable_context * saHpiCurrentSensorStateTable_create_row( netsnmp_index* );

saHpiCurrentSensorStateTable_context * saHpiCurrentSensorStateTable_get( const char *name, int len );

#ifdef __cplusplus
};
#endif

#endif /** SAHPICURRENTSENSORSTATETABLE_H */
