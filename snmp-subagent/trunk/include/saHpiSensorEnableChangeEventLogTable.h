/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.18.2.2 2004/02/09 18:21:47 rstory Exp $
 *
 * $Id$
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef SAHPISENSORENABLECHANGEEVENTLOGTABLE_H
#define SAHPISENSORENABLECHANGEEVENTLOGTABLE_H

#ifdef __cplusplus
extern "C" {
#endif

    
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

        /** Index saHpiDomainId is external */
        /** Index saHpiResourceId is external */
        /** Index saHpiSensorNum is external */
        /** Index saHpiEventSeverity is external */
        /** Index saHpiSensorEnableChangeEventEntryId is external */

typedef struct saHpiSensorEnableChangeEventLogTable_context_s {
    netsnmp_index index; /** THIS MUST BE FIRST!!! */

    /*************************************************************
     * You can store data internally in this structure.
     *
     * TODO: You will probably have to fix a few types here...
     */
    /** TODO: add storage for external index(s)! */
        /** SaHpiTime = ASN_COUNTER64 */
    /** TODO: Is this type correct? */
            struct counter64 saHpiSensorEnableChangeEventLogTimestamp;

        /** SaHpiSensorType = ASN_INTEGER */
            long saHpiSensorEnableChangeEventLogType;

        /** SaHpiEventCategory = ASN_INTEGER */
            long saHpiSensorEnableChangeEventLogCategory;

        /** TruthValue = ASN_INTEGER */
            long saHpiSensorEnableChangeEventLogEnabled;

        /** TruthValue = ASN_INTEGER */
            long saHpiSensorEnableChangeEventLogEventsEnabled;

        /** SaHpiEventState = ASN_OCTET_STR */
            unsigned char saHpiSensorEnableChangeEventLogAssertEvents[SAHPI_MAX_TEXT_BUFFER_LENGTH];
            long saHpiSensorEnableChangeEventLogAssertEvents_len;

        /** SaHpiEventState = ASN_OCTET_STR */
            unsigned char saHpiSensorEnableChangeEventLogDeassertEvents[SAHPI_MAX_TEXT_BUFFER_LENGTH];
            long saHpiSensorEnableChangeEventLogDeassertEvents_len;

        /** SaHpiOptionalData = ASN_OCTET_STR */
            unsigned char saHpiSensorEnableChangeEventLogOptionalData[SAHPI_MAX_TEXT_BUFFER_LENGTH];
            long saHpiSensorEnableChangeEventLogOptionalData_len;

        /** SaHpiEventState = ASN_OCTET_STR */
            unsigned char saHpiSensorEnableChangeEventLogState[SAHPI_MAX_TEXT_BUFFER_LENGTH];
            long saHpiSensorEnableChangeEventLogState_len;


    /*
     * OR
     *
     * Keep a pointer to your data
     */
    void * data;

    /*
     *add anything else you want here
     */

} saHpiSensorEnableChangeEventLogTable_context;

/*************************************************************
 * function declarations
 */
void init_saHpiSensorEnableChangeEventLogTable(void);
void initialize_table_saHpiSensorEnableChangeEventLogTable(void);
const saHpiSensorEnableChangeEventLogTable_context * saHpiSensorEnableChangeEventLogTable_get_by_idx(netsnmp_index *);
const saHpiSensorEnableChangeEventLogTable_context * saHpiSensorEnableChangeEventLogTable_get_by_idx_rs(netsnmp_index *,
                                        int row_status);
int saHpiSensorEnableChangeEventLogTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);

/*************************************************************
 * function declarations
 */
SaErrorT populate_saHpiSensorEnableChangeEventLogTable(SaHpiSessionIdT sessionid, 
                                         SaHpiEventLogEntryT *event,
                                         oid * this_child_oid, 
                                         size_t *this_child_oid_len);

SaErrorT sen_en_change_event_log_clear(SaHpiSessionIdT session_id, 
                                      SaHpiResourceIdT resource_id,  
                                      oid *saHpiEventLogRowPointer, 
                                      size_t saHpiEventLogRowPointer_len,
				      int modifyTotal);


/*************************************************************
 * oid declarations
 */
extern oid saHpiSensorEnableChangeEventLogTable_oid[];
extern size_t saHpiSensorEnableChangeEventLogTable_oid_len;

#define saHpiSensorEnableChangeEventLogTable_TABLE_OID 1,3,6,1,4,1,18568,2,1,1,3,2,14
    
/*************************************************************
 * column number definitions for table saHpiSensorEnableChangeEventLogTable
 */

#define SENSOR_ENABLE_CHANGE_EVENT_LOG_INDEX_NR 5 
#define COLUMN_SAHPISENSORENABLECHANGEEVENTLOGTIMESTAMP 1
#define COLUMN_SAHPISENSORENABLECHANGEEVENTLOGTYPE 2
#define COLUMN_SAHPISENSORENABLECHANGEEVENTLOGCATEGORY 3
#define COLUMN_SAHPISENSORENABLECHANGEEVENTLOGENABLED 4
#define COLUMN_SAHPISENSORENABLECHANGEEVENTLOGEVENTSENABLED 5
#define COLUMN_SAHPISENSORENABLECHANGEEVENTLOGASSERTEVENTS 6
#define COLUMN_SAHPISENSORENABLECHANGEEVENTLOGDEASSERTEVENTS 7
#define COLUMN_SAHPISENSORENABLECHANGEEVENTLOGOPTIONALDATA 8
#define COLUMN_SAHPISENSORENABLECHANGEEVENTLOGSTATE 9
#define saHpiSensorEnableChangeEventLogTable_COL_MIN 1
#define saHpiSensorEnableChangeEventLogTable_COL_MAX 9

/* comment out the following line if you don't handle SET-REQUEST for saHpiSensorEnableChangeEventLogTable */
#define saHpiSensorEnableChangeEventLogTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define saHpiSensorEnableChangeEventLogTable_ROW_CREATION

/* comment out the following line if you don't want the secondary index */
#define saHpiSensorEnableChangeEventLogTable_IDX2

/* uncommend the following line if you allow modifications to an
 * active row */
/** define saHpiSensorEnableChangeEventLogTable_CAN_MODIFY_ACTIVE_ROW */

#ifdef saHpiSensorEnableChangeEventLogTable_SET_HANDLING

int saHpiSensorEnableChangeEventLogTable_extract_index( saHpiSensorEnableChangeEventLogTable_context * ctx, netsnmp_index * hdr );

void saHpiSensorEnableChangeEventLogTable_set_reserve1( netsnmp_request_group * );
void saHpiSensorEnableChangeEventLogTable_set_reserve2( netsnmp_request_group * );
void saHpiSensorEnableChangeEventLogTable_set_action( netsnmp_request_group * );
void saHpiSensorEnableChangeEventLogTable_set_commit( netsnmp_request_group * );
void saHpiSensorEnableChangeEventLogTable_set_free( netsnmp_request_group * );
void saHpiSensorEnableChangeEventLogTable_set_undo( netsnmp_request_group * );

saHpiSensorEnableChangeEventLogTable_context * saHpiSensorEnableChangeEventLogTable_duplicate_row( saHpiSensorEnableChangeEventLogTable_context* );
netsnmp_index * saHpiSensorEnableChangeEventLogTable_delete_row( saHpiSensorEnableChangeEventLogTable_context* );

int saHpiSensorEnableChangeEventLogTable_can_activate(saHpiSensorEnableChangeEventLogTable_context *undo_ctx,
                      saHpiSensorEnableChangeEventLogTable_context *row_ctx,
                      netsnmp_request_group * rg);
int saHpiSensorEnableChangeEventLogTable_can_deactivate(saHpiSensorEnableChangeEventLogTable_context *undo_ctx,
                        saHpiSensorEnableChangeEventLogTable_context *row_ctx,
                        netsnmp_request_group * rg);
int saHpiSensorEnableChangeEventLogTable_can_delete(saHpiSensorEnableChangeEventLogTable_context *undo_ctx,
                    saHpiSensorEnableChangeEventLogTable_context *row_ctx,
                    netsnmp_request_group * rg);
    
    
#ifdef saHpiSensorEnableChangeEventLogTable_ROW_CREATION
saHpiSensorEnableChangeEventLogTable_context * saHpiSensorEnableChangeEventLogTable_create_row( netsnmp_index* );
#endif
#endif

#ifdef saHpiSensorEnableChangeEventLogTable_IDX2
saHpiSensorEnableChangeEventLogTable_context * saHpiSensorEnableChangeEventLogTable_get( const char *name, int len );
#endif

#ifdef __cplusplus
};
#endif

#endif /** SAHPISENSORENABLECHANGEEVENTLOGTABLE_H */
