/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.18.2.2 2004/02/09 18:21:47 rstory Exp $
 *
 * $Id$
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef SAHPISENSORTABLE_H
#define SAHPISENSORTABLE_H

#ifdef __cplusplus
extern "C" {
#endif

    
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

        /** Index saHpiDomainId is external */
        /** Index saHpiResourceId is external */
        /** Index saHpiResourceIsHistorical is external */
        /** Index saHpiSensorNum is internal */

typedef struct saHpiSensorTable_context_s {
    netsnmp_index index; /** THIS MUST BE FIRST!!! */

    /*************************************************************
     * You can store data internally in this structure.
     *
     * TODO: You will probably have to fix a few types here...
     */
    /** TODO: add storage for external index(s)! */
        /** SaHpiInstrumentId = ASN_UNSIGNED */
            unsigned long saHpiSensorNum;

        /** SaHpiSensorType = ASN_INTEGER */
            long saHpiSensorType;

        /** SaHpiEventCategory = ASN_INTEGER */
            long saHpiSensorCategory;

        /** TruthValue = ASN_INTEGER */
            long saHpiSensorEnableCtrl;

        /** INTEGER = ASN_INTEGER */
            long saHpiSensorEventCtrl;

        /** SaHpiEventState = ASN_OCTET_STR */
            unsigned char saHpiSensorSupportedEventStates[SAHPI_MAX_TEXT_BUFFER_LENGTH];
            long saHpiSensorSupportedEventStates_len;

        /** TruthValue = ASN_INTEGER */
            long saHpiSensorIsSupported;

        /** SaHpiSensorReadingType = ASN_INTEGER */
            long saHpiSensorReadingType;

        /** SaHpiSensorUnits = ASN_INTEGER */
            long saHpiSensorBaseUnits;

        /** SaHpiSensorUnits = ASN_INTEGER */
            long saHpiSensorModifierUnits;

        /** INTEGER = ASN_INTEGER */
            long saHpiSensorModifierUse;

        /** TruthValue = ASN_INTEGER */
            long saHpiSensorPercentage;

        /** OCTETSTR = ASN_OCTET_STR */
            unsigned char saHpiSensorRangeFlags[SAHPI_MAX_TEXT_BUFFER_LENGTH];
            long saHpiSensorRangeFlags_len;

        /** Double = ASN_OCTET_STR */
            unsigned char saHpiSensorAccuracyFactor[sizeof(SaHpiFloat64T)];
            long saHpiSensorAccuracyFactor_len;

        /** UNSIGNED32 = ASN_UNSIGNED */
            unsigned long saHpiSensorOem;

        /** RowPointer = ASN_OBJECT_ID */
            oid saHpiSensorRDR[MAX_OID_LEN];
            long saHpiSensorRDR_len;


    /*
     * OR
     *
     * Keep a pointer to your data
     */
    void * data;

    /*
     *add anything else you want here
     */

} saHpiSensorTable_context;

/*************************************************************
 * set funtions
 */
int set_table_sensor (saHpiSensorTable_context *row_ctx);


/*************************************************************
 * function declarations
 */
SaErrorT populate_sensor(SaHpiSessionIdT sessionid, 
			 SaHpiRdrT *rdr_entry,
			 SaHpiRptEntryT *rpt_entry,
			 oid *full_oid, size_t full_oid_len,
			 oid *child_oid, size_t *child_oid_len);


/*************************************************************
 * function declarations
 */
void init_saHpiSensorTable(void);
void initialize_table_saHpiSensorTable(void);
const saHpiSensorTable_context * saHpiSensorTable_get_by_idx(netsnmp_index *);
const saHpiSensorTable_context * saHpiSensorTable_get_by_idx_rs(netsnmp_index *,
                                        int row_status);
int saHpiSensorTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);


/*************************************************************
 * oid declarations
 */
extern oid saHpiSensorTable_oid[];
extern size_t saHpiSensorTable_oid_len;

#define saHpiSensorTable_TABLE_OID 1,3,6,1,4,1,18568,2,1,1,4,9,2

/* Number of table Indexes */
#define SENSOR_INDEX_NR 4 
#define saHpiDomainId_INDEX 0
#define saHpiResourceEntryId_INDEX 1
#define saHpiResourceIsHistorical_INDEX 2
#define saHpiSensorEntryId_INDEX 3
    
/*************************************************************
 * column number definitions for table saHpiSensorTable
 */
#define COLUMN_SAHPISENSORNUM 1
#define COLUMN_SAHPISENSORTYPE 2
#define COLUMN_SAHPISENSORCATEGORY 3
#define COLUMN_SAHPISENSORENABLECTRL 4
#define COLUMN_SAHPISENSOREVENTCTRL 5
#define COLUMN_SAHPISENSORSUPPORTEDEVENTSTATES 6
#define COLUMN_SAHPISENSORISSUPPORTED 7
#define COLUMN_SAHPISENSORREADINGTYPE 8
#define COLUMN_SAHPISENSORBASEUNITS 9
#define COLUMN_SAHPISENSORMODIFIERUNITS 10
#define COLUMN_SAHPISENSORMODIFIERUSE 11
#define COLUMN_SAHPISENSORPERCENTAGE 12
#define COLUMN_SAHPISENSORRANGEFLAGS 13
#define COLUMN_SAHPISENSORACCURACYFACTOR 14
#define COLUMN_SAHPISENSOROEM 15
#define COLUMN_SAHPISENSORRDR 16
#define saHpiSensorTable_COL_MIN 2
#define saHpiSensorTable_COL_MAX 16

/* comment out the following line if you don't handle SET-REQUEST for saHpiSensorTable */
#define saHpiSensorTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define saHpiSensorTable_ROW_CREATION

/* comment out the following line if you don't want the secondary index */
#define saHpiSensorTable_IDX2

/* uncommend the following line if you allow modifications to an
 * active row */
/** define saHpiSensorTable_CAN_MODIFY_ACTIVE_ROW */

#ifdef saHpiSensorTable_SET_HANDLING

int saHpiSensorTable_extract_index( saHpiSensorTable_context * ctx, netsnmp_index * hdr );

void saHpiSensorTable_set_reserve1( netsnmp_request_group * );
void saHpiSensorTable_set_reserve2( netsnmp_request_group * );
void saHpiSensorTable_set_action( netsnmp_request_group * );
void saHpiSensorTable_set_commit( netsnmp_request_group * );
void saHpiSensorTable_set_free( netsnmp_request_group * );
void saHpiSensorTable_set_undo( netsnmp_request_group * );

saHpiSensorTable_context * saHpiSensorTable_duplicate_row( saHpiSensorTable_context* );
netsnmp_index * saHpiSensorTable_delete_row( saHpiSensorTable_context* );

int saHpiSensorTable_can_activate(saHpiSensorTable_context *undo_ctx,
                      saHpiSensorTable_context *row_ctx,
                      netsnmp_request_group * rg);
int saHpiSensorTable_can_deactivate(saHpiSensorTable_context *undo_ctx,
                        saHpiSensorTable_context *row_ctx,
                        netsnmp_request_group * rg);
int saHpiSensorTable_can_delete(saHpiSensorTable_context *undo_ctx,
                    saHpiSensorTable_context *row_ctx,
                    netsnmp_request_group * rg);
    
    
#ifdef saHpiSensorTable_ROW_CREATION
saHpiSensorTable_context * saHpiSensorTable_create_row( netsnmp_index* );
#endif
#endif

#ifdef saHpiSensorTable_IDX2
saHpiSensorTable_context * saHpiSensorTable_get( const char *name, int len );
#endif

#ifdef __cplusplus
};
#endif

#endif /** SAHPISENSORTABLE_H */
