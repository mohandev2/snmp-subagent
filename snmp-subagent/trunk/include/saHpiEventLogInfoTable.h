/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.18.2.2 2004/02/09 18:21:47 rstory Exp $
 *
 * $Id$
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef SAHPIEVENTLOGINFOTABLE_H
#define SAHPIEVENTLOGINFOTABLE_H

#ifdef __cplusplus
extern "C" {
#endif

    
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

#include "SaHpi.h"

        /** Index saHpiDomainId is external */
        /** Index saHpiResourceId is external */

typedef struct saHpiEventLogInfoTable_context_s {
    netsnmp_index index; /** THIS MUST BE FIRST!!! */

    /*************************************************************
     * You can store data internally in this structure.
     *
     * TODO: You will probably have to fix a few types here...
     */
    /** TODO: add storage for external index(s)! */
        /** UNSIGNED32 = ASN_UNSIGNED */
            unsigned long saHpiEventLogEntries;

        /** UNSIGNED32 = ASN_UNSIGNED */
            unsigned long saHpiEventLogSize;

        /** UNSIGNED32 = ASN_UNSIGNED */
            unsigned long saHpiEventLogUserEventMaxSize;

        /** SaHpiTime = ASN_COUNTER64 */
    /** TODO: Is this type correct? */
            long saHpiEventLogUpdateTimestamp;

        /** SaHpiTime = ASN_COUNTER64 */
    /** TODO: Is this type correct? */
            long saHpiEventLogCurrentTime;

        /** TruthValue = ASN_INTEGER */
            long saHpiEventLogIsEnabled;

        /** TruthValue = ASN_INTEGER */
            long saHpiEventLogOverflowFlag;

        /** TruthValue = ASN_INTEGER */
            long saHpiEventLogOverflowResetable;

        /** INTEGER = ASN_INTEGER */
            long saHpiEventLogOverflowAction;

        /** INTEGER = ASN_INTEGER */
            long saHpiEventLogOverflowReset;

        /** RowStatus = ASN_INTEGER */
            long saHpiEventLogDelete;

        /** TruthValue = ASN_INTEGER */
            long saHpiEventLogState;


    /*
     * OR
     *
     * Keep a pointer to your data
     */
    void * data;

    /*
     *add anything else you want here
     */

} saHpiEventLogInfoTable_context;

/*************************************************************
 * function declarations
 */
void init_saHpiEventLogInfoTable(void);
void initialize_table_saHpiEventLogInfoTable(void);
const saHpiEventLogInfoTable_context * saHpiEventLogInfoTable_get_by_idx(netsnmp_index *);
const saHpiEventLogInfoTable_context * saHpiEventLogInfoTable_get_by_idx_rs(netsnmp_index *,
                                        int row_status);
int saHpiEventLogInfoTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);


/*************************************************************
 * oid declarations
 */
extern oid saHpiEventLogInfoTable_oid[];
extern size_t saHpiEventLogInfoTable_oid_len;

#define saHpiEventLogInfoTable_TABLE_OID 1,3,6,1,4,1,18568,1,1,1,6,2,2,1
    
/*************************************************************
 * column number definitions for table saHpiEventLogInfoTable
 */
#define COLUMN_SAHPIEVENTLOGENTRIES 1
#define COLUMN_SAHPIEVENTLOGSIZE 2
#define COLUMN_SAHPIEVENTLOGUSEREVENTMAXSIZE 3
#define COLUMN_SAHPIEVENTLOGUPDATETIMESTAMP 4
#define COLUMN_SAHPIEVENTLOGCURRENTTIME 5
#define COLUMN_SAHPIEVENTLOGISENABLED 6
#define COLUMN_SAHPIEVENTLOGOVERFLOWFLAG 7
#define COLUMN_SAHPIEVENTLOGOVERFLOWRESETABLE 8
#define COLUMN_SAHPIEVENTLOGOVERFLOWACTION 9
#define COLUMN_SAHPIEVENTLOGOVERFLOWRESET 10
#define COLUMN_SAHPIEVENTLOGDELETE 11
#define COLUMN_SAHPIEVENTLOGSTATE 12
#define saHpiEventLogInfoTable_COL_MIN 1
#define saHpiEventLogInfoTable_COL_MAX 12

/* comment out the following line if you don't handle SET-REQUEST for saHpiEventLogInfoTable */
#define saHpiEventLogInfoTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define saHpiEventLogInfoTable_ROW_CREATION

/* comment out the following line if you don't want the secondary index */
#define saHpiEventLogInfoTable_IDX2

/* uncommend the following line if you allow modifications to an
 * active row */
/** define saHpiEventLogInfoTable_CAN_MODIFY_ACTIVE_ROW */

#ifdef saHpiEventLogInfoTable_SET_HANDLING

int saHpiEventLogInfoTable_extract_index( saHpiEventLogInfoTable_context * ctx, netsnmp_index * hdr );

void saHpiEventLogInfoTable_set_reserve1( netsnmp_request_group * );
void saHpiEventLogInfoTable_set_reserve2( netsnmp_request_group * );
void saHpiEventLogInfoTable_set_action( netsnmp_request_group * );
void saHpiEventLogInfoTable_set_commit( netsnmp_request_group * );
void saHpiEventLogInfoTable_set_free( netsnmp_request_group * );
void saHpiEventLogInfoTable_set_undo( netsnmp_request_group * );

saHpiEventLogInfoTable_context * saHpiEventLogInfoTable_duplicate_row( saHpiEventLogInfoTable_context* );
netsnmp_index * saHpiEventLogInfoTable_delete_row( saHpiEventLogInfoTable_context* );

int saHpiEventLogInfoTable_can_activate(saHpiEventLogInfoTable_context *undo_ctx,
                      saHpiEventLogInfoTable_context *row_ctx,
                      netsnmp_request_group * rg);
int saHpiEventLogInfoTable_can_deactivate(saHpiEventLogInfoTable_context *undo_ctx,
                        saHpiEventLogInfoTable_context *row_ctx,
                        netsnmp_request_group * rg);
int saHpiEventLogInfoTable_can_delete(saHpiEventLogInfoTable_context *undo_ctx,
                    saHpiEventLogInfoTable_context *row_ctx,
                    netsnmp_request_group * rg);
    
    
#ifdef saHpiEventLogInfoTable_ROW_CREATION
saHpiEventLogInfoTable_context * saHpiEventLogInfoTable_create_row( netsnmp_index* );
#endif
#endif

#ifdef saHpiEventLogInfoTable_IDX2
saHpiEventLogInfoTable_context * saHpiEventLogInfoTable_get( const char *name, int len );
#endif

#ifdef __cplusplus
};
#endif

#endif /** SAHPIEVENTLOGINFOTABLE_H */
