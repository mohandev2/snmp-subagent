/*
 * (C) Copyright IBM Corp. 2003
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  This
 * file and program are licensed under a BSD style license.  See
 * the Copying file included with the OpenHPI distribution for
 * full licensing terms.
 *
 * Authors:
 *   Konrad Rzeszutek <konradr@us.ibm.com>
 *
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.15.2.1 2003/02/27 05:59:41 rstory Exp $
 *
 * $Id$
 *
 */
#ifndef SAHPISYSTEMEVENTLOGTABLE_H
#define SAHPISYSTEMEVENTLOGTABLE_H

#ifdef __cplusplus
extern "C"
{
#endif


#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>
#include <SaHpi.h>
#include <hpiSubagent.h>

/*
   * Number of index values in this table.
   * Consult the HPI-MIB
   *
   * If this number changes, look in the src code for this 
   * define, and make sure to add/remove the new index value(s).
   */
#define SEL_INDEX_NR 3


#define SEL_TRIGGER_READING_INTERPRETED_MAX 32
  //#define SEL_TRIGGER_READING_EVENT_STATE_MAX 255
#define SEL_TRIGGER_THRESHOLD_INTERPRETED_MAX 32
  //#define SEL_TRIGGER_THRESHOLD_EVENT_STATE_MAX 255
#define SEL_SENSOR_STATE_MAX 255

	/** Index saHpiDomainID is external */
	/** Index saHpiResourceID is external */
	/** Index saHpiSystemEventLogEntryId is internal */

  typedef struct saHpiSystemEventLogTable_context_s
  {
    netsnmp_index index;

	  /** UNSIGNED32 = ASN_UNSIGNED */
    unsigned long saHpiSystemEventLogIndex;


	/** TimeStamp = ASN_TIMETICKS */
    integer64 saHpiSystemEventLogAddedTimestamp;


	/** INTEGER = ASN_INTEGER */
    long saHpiSystemEventLogType;

	/** HpiTimeStamp = ASN_COUNTER64 */
    integer64 saHpiSystemEventLogTimestamp;

	/** INTEGER = ASN_INTEGER */
    long saHpiSystemEventLogSeverity;

	/** UNSIGNED32 = ASN_UNSIGNED */
    unsigned long saHpiSystemEventLogSensorNum;

	/** INTEGER = ASN_INTEGER */
    long saHpiSystemEventLogSensorType;

	/** INTEGER = ASN_INTEGER */
    long saHpiSystemEventLogSensorCategory;

	/** TruthValue = ASN_INTEGER */
    long saHpiSystemEventLogSensorAssertion;

     /** OCTETSTR = ASN_OCTET_STR */
    unsigned char   saHpiSystemEventLogSensorState[SEL_SENSOR_STATE_MAX];
    size_t            saHpiSystemEventLogSensorState_len;

	/** UNSIGNED32 = ASN_UNSIGNED */
    unsigned long saHpiSystemEventLogSensorOptionalData;

	/** UNSIGNED32 = ASN_UNSIGNED */
    unsigned long saHpiSystemEventLogSensorTriggerReadingType;

	/** UNSIGNED32 = ASN_UNSIGNED */
    unsigned long saHpiSystemEventLogSensorTriggerReadingRaw;

	/** OCTETSTR = ASN_OCTET_STR */
    unsigned char
      saHpiSystemEventLogSensorTriggerReadingInterpreted
      [SEL_TRIGGER_READING_INTERPRETED_MAX];
    size_t saHpiSystemEventLogSensorTriggerReadingInterpreted_len;
    
    /** INTEGER = ASN_INTEGER */
    long           
      saHpiSystemEventLogSensorTriggerReadingEventStateFlag;

	/** OCTETSTR = ASN_OCTET_STR */
    unsigned char
      saHpiSystemEventLogSensorTriggerReadingEventState
      [SEL_SENSOR_STATE_MAX];
    size_t saHpiSystemEventLogSensorTriggerReadingEventState_len;

	/** UNSIGNED32 = ASN_UNSIGNED */
    unsigned long saHpiSystemEventLogSensorTriggerThresholdType;

	/** UNSIGNED32 = ASN_UNSIGNED */
    unsigned long saHpiSystemEventLogSensorTriggerThresholdRaw;


	/** OCTETSTR = ASN_OCTET_STR */
    unsigned char
      saHpiSystemEventLogSensorTriggerThresholdInterpreted
      [SEL_TRIGGER_THRESHOLD_INTERPRETED_MAX];
    size_t saHpiSystemEventLogSensorTriggerThresholdInterpreted_len;

  /** INTEGER = ASN_INTEGER */
    long           
     saHpiSystemEventLogSensorTriggerThresholdEventStateFlag;

	/** OCTETSTR = ASN_OCTET_STR */
    unsigned char
      saHpiSystemEventLogSensorTriggerThresholdEventState
      [SEL_SENSOR_STATE_MAX];
    size_t saHpiSystemEventLogSensorTriggerThresholdEventState_len;

 /** OCTETSTR = ASN_OCTET_STR */
    unsigned char   saHpiSystemEventLogSensorPreviousState[SEL_SENSOR_STATE_MAX];
    size_t            saHpiSystemEventLogSensorPreviousState_len;

	/** UNSIGNED32 = ASN_UNSIGNED */
    unsigned long saHpiSystemEventLogSensorOem;

	/** UNSIGNED32 = ASN_UNSIGNED */
    unsigned long saHpiSystemEventLogSensorSpecific;

	/** INTEGER = ASN_INTEGER */
    long saHpiSystemEventLogHotSwapState;

	/** INTEGER = ASN_INTEGER */
    long saHpiSystemEventLogPreviousHotSwapState;

	/** UNSIGNED32 = ASN_UNSIGNED */
    unsigned long saHpiSystemEventLogWatchdogNum;

	/** INTEGER = ASN_INTEGER */
    long saHpiSystemEventLogWatchdogAction;

	/** INTEGER = ASN_INTEGER */
    long saHpiSystemEventLogWatchdogPreTimerAction;

	/** INTEGER = ASN_INTEGER */
    long saHpiSystemEventLogWatchdogUse;

	/** UNSIGNED32 = ASN_UNSIGNED */
    unsigned long saHpiSystemEventLogOemManufacturerIdT;

	/** OCTETSTR = ASN_OCTET_STR */
    unsigned char saHpiSystemEventLogOemEventData[SAHPI_OEM_EVENT_DATA_SIZE];
    long saHpiSystemEventLogOemEventData_len;

	/** OCTETSTR = ASN_OCTET_STR */
    unsigned char
      saHpiSystemEventLogUserEventData[SAHPI_USER_EVENT_DATA_SIZE];
    long saHpiSystemEventLogUserEventData_len;

	/** RowStatus = ASN_INTEGER */
    long saHpiSystemEventLogDelete;

    long hash;
    unsigned long resource_id;
    unsigned long domain_id;

  } saHpiSystemEventLogTable_context;

/*************************************************************
 * function declarations
 */

  void initialize_table_saHpiSystemEventLogTable (void);

  int saHpiSystemEventLogTable_get_value (netsnmp_request_info
					  *, netsnmp_index *,
					  netsnmp_table_request_info *);

  int populate_sel (SaHpiRptEntryT * rpt_entry);
  //                      oid *DomainID_oid, const size_t DomainID_oid_len,
  //                      oid *ResourceID_oid, const size_t ResourceID_oid_len);


  int set_SEL_delete (saHpiSystemEventLogTable_context * ctx);


  int delete_SEL_row (SaHpiDomainIdT domain_id, SaHpiResourceIdT resource_id);


  int
    event_log_update_timestamp_handler (netsnmp_mib_handler * handler,
					netsnmp_handler_registration *
					reginfo,
					netsnmp_agent_request_info * reqinfo,
					netsnmp_request_info * requests);
  int event_log_current_timestamp_handler (netsnmp_mib_handler * handler,
					   netsnmp_handler_registration *
					   reginfo,
					   netsnmp_agent_request_info *
					   reqinfo,
					   netsnmp_request_info * requests);


  int
    event_log_entries_handler (netsnmp_mib_handler * handler,
			       netsnmp_handler_registration * reginfo,
			       netsnmp_agent_request_info * reqinfo,
			       netsnmp_request_info * requests);
/*************************************************************
 * oid declarations
 */
  extern oid saHpiSystemEventLogTable_oid[];
  extern size_t saHpiSystemEventLogTable_oid_len;

#define saHpiSystemEventLogTable_TABLE_OID systemEvents_OID, 9


/*************************************************************
 * column number definitions for table saHpiSystemEventLogTable
 */
#define COLUMN_SAHPISYSTEMEVENTLOGINDEX 1
#define COLUMN_SAHPISYSTEMEVENTLOGADDEDTIMESTAMP 2
#define COLUMN_SAHPISYSTEMEVENTLOGTYPE 3
#define COLUMN_SAHPISYSTEMEVENTLOGTIMESTAMP 4
#define COLUMN_SAHPISYSTEMEVENTLOGSEVERITY 5
#define COLUMN_SAHPISYSTEMEVENTLOGSENSORNUM 6
#define COLUMN_SAHPISYSTEMEVENTLOGSENSORTYPE 7
#define COLUMN_SAHPISYSTEMEVENTLOGSENSORCATEGORY 8
#define COLUMN_SAHPISYSTEMEVENTLOGSENSORASSERTION 9
#define COLUMN_SAHPISYSTEMEVENTLOGSENSORSTATE 10
#define COLUMN_SAHPISYSTEMEVENTLOGSENSOROPTIONALDATA 11
#define COLUMN_SAHPISYSTEMEVENTLOGSENSORTRIGGERREADINGTYPE 12
#define COLUMN_SAHPISYSTEMEVENTLOGSENSORTRIGGERREADINGRAW 13
#define COLUMN_SAHPISYSTEMEVENTLOGSENSORTRIGGERREADINGINTERPRETED 14
#define COLUMN_SAHPISYSTEMEVENTLOGSENSORTRIGGERREADINGEVENTSTATEFLAG 15
#define COLUMN_SAHPISYSTEMEVENTLOGSENSORTRIGGERREADINGEVENTSTATE 16
#define COLUMN_SAHPISYSTEMEVENTLOGSENSORTRIGGERTHRESHOLDTYPE 17
#define COLUMN_SAHPISYSTEMEVENTLOGSENSORTRIGGERTHRESHOLDRAW 18
#define COLUMN_SAHPISYSTEMEVENTLOGSENSORTRIGGERTHRESHOLDINTERPRETED 19
#define COLUMN_SAHPISYSTEMEVENTLOGSENSORTRIGGERTHRESHOLDEVENTSTATEFLAG 20
#define COLUMN_SAHPISYSTEMEVENTLOGSENSORTRIGGERTHRESHOLDEVENTSTATE 21
#define COLUMN_SAHPISYSTEMEVENTLOGSENSORPREVIOUSSTATE 22
#define COLUMN_SAHPISYSTEMEVENTLOGSENSOROEM 23
#define COLUMN_SAHPISYSTEMEVENTLOGSENSORSPECIFIC 24
#define COLUMN_SAHPISYSTEMEVENTLOGHOTSWAPSTATE 25
#define COLUMN_SAHPISYSTEMEVENTLOGPREVIOUSHOTSWAPSTATE 26
#define COLUMN_SAHPISYSTEMEVENTLOGWATCHDOGNUM 27
#define COLUMN_SAHPISYSTEMEVENTLOGWATCHDOGACTION 28
#define COLUMN_SAHPISYSTEMEVENTLOGWATCHDOGPRETIMERACTION 29
#define COLUMN_SAHPISYSTEMEVENTLOGWATCHDOGUSE 30
#define COLUMN_SAHPISYSTEMEVENTLOGOEMMANUFACTURERIDT 31
#define COLUMN_SAHPISYSTEMEVENTLOGOEMEVENTDATA 32
#define COLUMN_SAHPISYSTEMEVENTLOGUSEREVENTDATA 33
#define COLUMN_SAHPISYSTEMEVENTLOGDELETE 34
#define saHpiSystemEventLogTable_COL_MIN 1
#define saHpiSystemEventLogTable_COL_MAX 34



  int
    saHpiSystemEventLogTable_extract_index
    (saHpiSystemEventLogTable_context * ctx, netsnmp_index * hdr);

  void saHpiSystemEventLogTable_set_reserve1 (netsnmp_request_group *);
  void saHpiSystemEventLogTable_set_reserve2 (netsnmp_request_group *);
  void saHpiSystemEventLogTable_set_action (netsnmp_request_group *);
  void saHpiSystemEventLogTable_set_commit (netsnmp_request_group *);
  void saHpiSystemEventLogTable_set_free (netsnmp_request_group *);
  void saHpiSystemEventLogTable_set_undo (netsnmp_request_group *);

    saHpiSystemEventLogTable_context
    * saHpiSystemEventLogTable_duplicate_row
    (saHpiSystemEventLogTable_context *);

    netsnmp_index
    * saHpiSystemEventLogTable_delete_row
    (saHpiSystemEventLogTable_context *);

  int
    saHpiSystemEventLogTable_can_delete
    (saHpiSystemEventLogTable_context * undo_ctx,
     saHpiSystemEventLogTable_context * row_ctx, netsnmp_request_group * rg);



    saHpiSystemEventLogTable_context
    * saHpiSystemEventLogTable_create_row (netsnmp_index *);

  /*
     saHpiSystemEventLogTable_context *saHpiSystemEventLogTable_get(const
     char
     *name,
     int
     len);

   */
#ifdef __cplusplus
};
#endif

#endif /** SAHPISYSTEMEVENTLOGTABLE_H */
