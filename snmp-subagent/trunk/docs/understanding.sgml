<!-- ...................................................................... -->
<!-- $Id$ ................................................ -->
<!-- 
        This material may be distributed only subject to the terms and 
        conditions set forth in the Open Publication License, v1.0 or later 
        (the latest version is currently available at 
        http://www.opencontent.org/openpub/).  Distribution of substantively 
        modified version of this document is prohibited without the explicit 
        permission of the copyright holder.

        Other company, product, or service names may be trademarks or service 
        marks of others.
-->
<chapter>
  <title>Understanding the sub-agent</title>
  <sect1>
    <title>Attack vector</title>
	<para>
	There are two ways of explaining the details of the generated
	sub-agent code. The first is to explain in detail every piece of the code
	 and let the reader make the connection. The other (which we will use) is
	to comb through the code explaining what it does with and provide 
	working examples for every usage.
	</para>
	
	<sect2>
	   <title>The bare minimum</title>

	<para>
	 To have just a working, compilable, running code that does not do anything interesting,
	you need two extra files that are not generated by mib2c. They are:
	<itemizedlist mark='opencircle'>
		<listitem>
			<para>Makefile. A good one that I modified is available from
			<ulink 
url="http://www.net-snmp.org/tutorial-5/toolkit/demoapp/Makefile">NET-SNMP Tutorial</ulink>.
			<programlisting role="C">
OBJS2=example-demon.o netSnmpIETFWGTable.o
TARGETS=example-demon

CFLAGS=-I. `net-snmp-config --cflags`
BUILDLIBS=`net-snmp-config --libs`
BUILDAGENTLIBS=`net-snmp-config --agent-libs`

# shared library flags (assumes gcc)
DLFLAGS=-fPIC -shared

all: $(TARGETS)

example-demon: $(OBJS2)
	$(CC) -o example-demon $(OBJS2)  $(BUILDAGENTLIBS)
netSnmpIETFWGTable.o: netSnmpIETFWGTable.c Makefile
	$(CC) $(CFLAGS) $(DLFLAGS) -c -o netSnmpIETFWGTable.o netSnmpIETFWGTable.c
	$(CC) $(CFLAGS) $(DLFLAGS) -o netSnmpIETFWGTable.so netSnmpIETFWGTable.o
			</programlisting>
			</para>
		</listitem>
		<listitem>
			<para>The daemon which will use the generated sub-agent code. 
<programlisting role="C">
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include <signal.h>

#include <nstAgentSubagentObject.h>

static int keep_running;

RETSIGTYPE
stop_server(int a) {
    keep_running = 0;
}

int
main (int argc, char **argv) {
  int agentx_subagent=1; /* change this if you want to be a SNMP master agent */

  /* print log errors to stderr */
  snmp_enable_stderrlog();

  /* we're an agentx subagent? */
  if (agentx_subagent) {
    /* make us a agentx client. */
    netsnmp_ds_set_boolean(NETSNMP_DS_APPLICATION_ID, NETSNMP_DS_AGENT_ROLE, 1);
  }

  /* initialize the agent library */
  init_agent("example-demon");

  /* initialize mib code here */

  /* mib code: init_nstAgentSubagentObject from nstAgentSubagentObject.C */
  init_nstAgentSubagentObject();  

  /* example-demon will be used to read example-demon.conf files. */
  init_snmp("example-demon");

  /* If we're going to be a snmp master agent, initial the ports */
  if (!agentx_subagent)
    init_master_agent();  /* open the port to listen on (defaults to udp:161) */

  /* In case we recevie a request to stop (kill -TERM or kill -INT) */
  keep_running = 1;
  signal(SIGTERM, stop_server);
  signal(SIGINT, stop_server);

  /* you're main loop here... */
  while(keep_running) {
    /* if you use select(), see snmp_select_info() in snmp_api(3) */
    /*     --- OR ---  */
    agent_check_and_process(1); /* 0 == don't block */
  }

  /* at shutdown time */
  snmp_shutdown("example-demon");
}

</programlisting>
			</para>
		</listitem>
  </sect1>	
</chapter>
