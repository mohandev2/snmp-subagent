/*
 * (C) Copyright IBM Corp. 2004
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  This
 * file and program are licensed under a BSD style license.  See
 * the Copying file included with the OpenHPI distribution for
 * full licensing terms.
 *
 * Authors:
 *   Konrad Rzeszutek <konradr@us.ibm.com>

 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.18 2003/11/07 17:03:52 rstory Exp $
 *
 * $Id$
 *
 */
#ifndef SAHPISENSORTHDUPCRITICALTABLE_H
#define SAHPISENSORTHDUPCRITICALTABLE_H

#ifdef __cplusplus
extern "C"
{
#endif


#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>
#include <SaHpi.h>
#include <hpiSubagent.h>


	/** Index saHpiDomainID is external */
	/** Index saHpiResourceID is external */
	/** Index saHpiSensorIndex is external */

  typedef struct saHpiSensorThdUpCriticalTable_context_s
  {
    netsnmp_index index;

    /** TruthValue = ASN_INTEGER */
    long            saHpiSensorThdUpCriticalIsReadable;
    
    /** TruthValue = ASN_INTEGER */
    long            saHpiSensorThdUpCriticalIsWritable;
    
    /** TruthValue = ASN_INTEGER */
    long            saHpiSensorThdUpCriticalIsFixed;
    
    /** INTEGER = ASN_INTEGER */
    long            saHpiSensorThdUpCriticalValuesPresent;

    /** UNSIGNED32 = ASN_UNSIGNED */
    unsigned long   saHpiSensorThdUpCriticalRaw;

	/** OCTETSTR = ASN_OCTET_STR */
    unsigned char
      saHpiSensorThdUpCriticalInterpreted[SENSOR_THD_INTER_MAX];
    size_t saHpiSensorThdUpCriticalInterpreted_len;



    long sensor_id;
    long resource_id;
    long domain_id;
    long hash;


  } saHpiSensorThdUpCriticalTable_context;

/*************************************************************
 * function declarations
 */

  void initialize_table_saHpiSensorThdUpCriticalTable (void);

  int
    delete_ThdUpCritical_row (SaHpiDomainIdT domain_id,
			       SaHpiResourceIdT resource_id,
			       SaHpiSensorNumT num);

  int populate_ThdUpCritical (SaHpiDomainIdT domain_id,
			       SaHpiResourceIdT resource_id,
			       SaHpiSensorNumT sensor_id,
			       SaHpiSensorThdDefnT *threshold_def,
			       SaHpiSensorReadingT * reading);


  int set_ThdUpCritical (saHpiSensorThdUpCriticalTable_context *ctx);

  int
    saHpiSensorThdUpCriticalTable_get_value (netsnmp_request_info *,
					      netsnmp_index *,
					      netsnmp_table_request_info *);


/*************************************************************
 * oid declarations
 */
  extern oid saHpiSensorThdUpCriticalTable_oid[];
  extern size_t saHpiSensorThdUpCriticalTable_oid_len;

#define saHpiSensorThdUpCriticalTable_TABLE_OID hpiSensor_OID,10

/*************************************************************
 * column number definitions for table saHpiSensorThdUpCriticalTable
 */
#define COLUMN_SAHPISENSORTHDUPCRITICALISREADABLE 1
#define COLUMN_SAHPISENSORTHDUPCRITICALISWRITABLE 2
#define COLUMN_SAHPISENSORTHDUPCRITICALISFIXED 3
#define COLUMN_SAHPISENSORTHDUPCRITICALVALUESPRESENT 4
#define COLUMN_SAHPISENSORTHDUPCRITICALRAW 5
#define COLUMN_SAHPISENSORTHDUPCRITICALINTERPRETED 6
#define saHpiSensorThdUpCriticalTable_COL_MIN 1
#define saHpiSensorThdUpCriticalTable_COL_MAX 6

  int
    saHpiSensorThdUpCriticalTable_extract_index
    (saHpiSensorThdUpCriticalTable_context * ctx, netsnmp_index * hdr);

  void saHpiSensorThdUpCriticalTable_set_reserve1 (netsnmp_request_group *);
  void saHpiSensorThdUpCriticalTable_set_reserve2 (netsnmp_request_group *);
  void saHpiSensorThdUpCriticalTable_set_action (netsnmp_request_group *);
  void saHpiSensorThdUpCriticalTable_set_commit (netsnmp_request_group *);
  void saHpiSensorThdUpCriticalTable_set_free (netsnmp_request_group *);
  void saHpiSensorThdUpCriticalTable_set_undo (netsnmp_request_group *);

    saHpiSensorThdUpCriticalTable_context
    * saHpiSensorThdUpCriticalTable_duplicate_row
    (saHpiSensorThdUpCriticalTable_context *);
    netsnmp_index
    * saHpiSensorThdUpCriticalTable_delete_row
    (saHpiSensorThdUpCriticalTable_context *);

  int
    saHpiSensorThdUpCriticalTable_can_delete
    (saHpiSensorThdUpCriticalTable_context * undo_ctx,
     saHpiSensorThdUpCriticalTable_context * row_ctx,
     netsnmp_request_group * rg);



    saHpiSensorThdUpCriticalTable_context
    * saHpiSensorThdUpCriticalTable_create_row (netsnmp_index *);

#ifdef __cplusplus
};
#endif

#endif /** SAHPISENSORTHDUPCRITICALTABLE_H */
