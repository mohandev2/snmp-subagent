/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.18 2003/11/07 17:03:52 rstory Exp $
 *
 * $Id$
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef SAHPISENSORTHDUPCRITICALTABLE_H
#define SAHPISENSORTHDUPCRITICALTABLE_H

#ifdef __cplusplus
extern "C" {
#endif

    
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

        /** Index saHpiDomainId is external */
        /** Index saHpiResourceId is external */
        /** Index saHpiSensorNum is external */

typedef struct saHpiSensorThdUpCriticalTable_context_s {
    netsnmp_index index; /** THIS MUST BE FIRST!!! */

    /*************************************************************
     * You can store data internally in this structure.
     *
     * TODO: You will probably have to fix a few types here...
     */
    /** TODO: add storage for external index(s)! */
        /** TruthValue = ASN_INTEGER */
            long saHpiSensorThdUpCriticalIsReadable;

        /** TruthValue = ASN_INTEGER */
            long saHpiSensorThdUpCriticalIsWritable;

        /** SaHpiSensorReadingType = ASN_INTEGER */
            long saHpiSensorThdUpCriticalType;

        /** SaHpiSensorReadingValue = ASN_OCTET_STR */
            unsigned char saHpiSensorThdUpCriticalValue[65535];
            long saHpiSensorThdUpCriticalValue_len;


    /*
     * OR
     *
     * Keep a pointer to your data
     */
    void * data;

    /*
     *add anything else you want here
     */

} saHpiSensorThdUpCriticalTable_context;

/*************************************************************
 * function declarations
 */
void init_saHpiSensorThdUpCriticalTable(void);
void initialize_table_saHpiSensorThdUpCriticalTable(void);
const saHpiSensorThdUpCriticalTable_context * saHpiSensorThdUpCriticalTable_get_by_idx(netsnmp_index *);
const saHpiSensorThdUpCriticalTable_context * saHpiSensorThdUpCriticalTable_get_by_idx_rs(netsnmp_index *,
                                        int row_status);
int saHpiSensorThdUpCriticalTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);


/*************************************************************
 * oid declarations
 */
extern oid saHpiSensorThdUpCriticalTable_oid[];
extern size_t saHpiSensorThdUpCriticalTable_oid_len;

#define saHpiSensorThdUpCriticalTable_TABLE_OID 1,3,6,1,4,1,18568,1,1,1,6,3,7,10
    
/*************************************************************
 * column number definitions for table saHpiSensorThdUpCriticalTable
 */
#define COLUMN_SAHPISENSORTHDUPCRITICALISREADABLE 1
#define COLUMN_SAHPISENSORTHDUPCRITICALISWRITABLE 2
#define COLUMN_SAHPISENSORTHDUPCRITICALTYPE 3
#define COLUMN_SAHPISENSORTHDUPCRITICALVALUE 4
#define saHpiSensorThdUpCriticalTable_COL_MIN 1
#define saHpiSensorThdUpCriticalTable_COL_MAX 4

/* comment out the following line if you don't handle SET-REQUEST for saHpiSensorThdUpCriticalTable */
#define saHpiSensorThdUpCriticalTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define saHpiSensorThdUpCriticalTable_ROW_CREATION

/* comment out the following line if you don't want the secondary index */
#define saHpiSensorThdUpCriticalTable_IDX2

/* uncommend the following line if you allow modifications to an
 * active row */
/** define saHpiSensorThdUpCriticalTable_CAN_MODIFY_ACTIVE_ROW */

#ifdef saHpiSensorThdUpCriticalTable_SET_HANDLING

int saHpiSensorThdUpCriticalTable_extract_index( saHpiSensorThdUpCriticalTable_context * ctx, netsnmp_index * hdr );

void saHpiSensorThdUpCriticalTable_set_reserve1( netsnmp_request_group * );
void saHpiSensorThdUpCriticalTable_set_reserve2( netsnmp_request_group * );
void saHpiSensorThdUpCriticalTable_set_action( netsnmp_request_group * );
void saHpiSensorThdUpCriticalTable_set_commit( netsnmp_request_group * );
void saHpiSensorThdUpCriticalTable_set_free( netsnmp_request_group * );
void saHpiSensorThdUpCriticalTable_set_undo( netsnmp_request_group * );

saHpiSensorThdUpCriticalTable_context * saHpiSensorThdUpCriticalTable_duplicate_row( saHpiSensorThdUpCriticalTable_context* );
netsnmp_index * saHpiSensorThdUpCriticalTable_delete_row( saHpiSensorThdUpCriticalTable_context* );

int saHpiSensorThdUpCriticalTable_can_activate(saHpiSensorThdUpCriticalTable_context *undo_ctx,
                      saHpiSensorThdUpCriticalTable_context *row_ctx,
                      netsnmp_request_group * rg);
int saHpiSensorThdUpCriticalTable_can_deactivate(saHpiSensorThdUpCriticalTable_context *undo_ctx,
                        saHpiSensorThdUpCriticalTable_context *row_ctx,
                        netsnmp_request_group * rg);
int saHpiSensorThdUpCriticalTable_can_delete(saHpiSensorThdUpCriticalTable_context *undo_ctx,
                    saHpiSensorThdUpCriticalTable_context *row_ctx,
                    netsnmp_request_group * rg);
    
    
#ifdef saHpiSensorThdUpCriticalTable_ROW_CREATION
saHpiSensorThdUpCriticalTable_context * saHpiSensorThdUpCriticalTable_create_row( netsnmp_index* );
#endif
#endif

#ifdef saHpiSensorThdUpCriticalTable_IDX2
saHpiSensorThdUpCriticalTable_context * saHpiSensorThdUpCriticalTable_get( const char *name, int len );
#endif

#ifdef __cplusplus
};
#endif

#endif /** SAHPISENSORTHDUPCRITICALTABLE_H */
