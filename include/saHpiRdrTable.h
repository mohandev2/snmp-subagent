/*
 * (C) Copyright IBM Corp. 2005
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  This
 * file and program are licensed under a BSD style license.  See
 * the Copying file included with the OpenHPI distribution for
 * full licensing terms.
 *
 * Authors:
 *   David Judkovics  <djudkovi@us.ibm.com>
 *   Daniel de Araujo <ddearauj@us.ibm.com>
 *
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.18.2.2 2004/02/09 18:21:47 rstory Exp $
 *
 * $Id$
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef SAHPIRDRTABLE_H
#define SAHPIRDRTABLE_H

#ifdef __cplusplus
extern "C" {
#endif

    
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>   

#include <SaHpi.h>
#include <oh_utils.h>

        /** Index saHpiDomainId is external */
        /** Index saHpiResourceId is external */
        /** Index saHpiResourceIsHistorical is external */
        /** Index saHpiRdrEntryId is internal */ 

/* Number of table Indexes */
#define RDR_INDEX_NR 4 

typedef struct saHpiRdrTable_context_s {
    netsnmp_index index; /** THIS MUST BE FIRST!!! */

    /*************************************************************
     * You can store data internally in this structure.
     *
     * TODO: You will probably have to fix a few types here...
     */
    /** TODO: add storage for external index(s)! */
        /** COUNTER = ASN_COUNTER */
            unsigned long saHpiRdrEntryId;

        /** COUNTER = ASN_COUNTER */
            unsigned long saHpiRdrNextEntryId;

        /** INTEGER = ASN_INTEGER */
            long saHpiRdrType;

        /** SaHpiEntityPath = ASN_OCTET_STR */
            unsigned char saHpiRdrEntityPath[sizeof(oh_big_textbuffer)];
            long saHpiRdrEntityPath_len;

        /** TruthValue = ASN_INTEGER */
            long saHpiRdrIsFru;

        /** RowPointer = ASN_OBJECT_ID */
            oid saHpiRdrRowPointer[MAX_OID_LEN];
            long saHpiRdrRowPointer_len;

        /** RowPointer = ASN_OBJECT_ID */
            oid saHpiRdrRPT[MAX_OID_LEN];
            long saHpiRdrRPT_len;

        /** SaHpiTextType = ASN_INTEGER */
            long saHpiRdrTextType;

        /** SaHpiTextLanguage = ASN_INTEGER */
            long saHpiRdrTextLanguage;

        /** OCTETSTR = ASN_OCTET_STR */
            unsigned char saHpiRdrIdString[SAHPI_MAX_TEXT_BUFFER_LENGTH];
            long saHpiRdrIdString_len;


    /*
     * OR
     *
     * Keep a pointer to your data
     */
    void * data;

    /*
     *add anything else you want here
     */

} saHpiRdrTable_context;

/*************************************************************
 * function declarations
 */
int populate_saHpiRdrTable(SaHpiSessionIdT sessionid, 
			   SaHpiRptEntryT * rpt_entry,
			   oid * resource_oid, 
			   size_t resource_oid_len);

void init_saHpiRdrTable(void);
void initialize_table_saHpiRdrTable(void);
const saHpiRdrTable_context * saHpiRdrTable_get_by_idx(netsnmp_index *);
const saHpiRdrTable_context * saHpiRdrTable_get_by_idx_rs(netsnmp_index *,
                                        int row_status);
int saHpiRdrTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);


/*************************************************************
 * oid and fucntion declarations scalars
 */
int handle_saHpiRdrEntryCount( netsnmp_mib_handler *handler, 
			       netsnmp_handler_registration *reginfo,
			       netsnmp_agent_request_info   *reqinfo, 
			       netsnmp_request_info *requests);

int initialize_table_saHpiRdrEntryCount(void);
SaErrorT clear_rdr_container(SaHpiDomainIdT domainId, 
                             SaHpiResourceIdT resourceId);


/*************************************************************
 * oid declarations
 */
extern oid saHpiRdrTable_oid[];
extern size_t saHpiRdrTable_oid_len;

#define saHpiRdrTable_TABLE_OID 1,3,6,1,4,1,18568,2,1,1,4,2
    
/*************************************************************
 * column number definitions for table saHpiRdrTable
 */
#define saHpiRdrDomainId_Index 0
#define saHpiRdrResourceId_Index 1
#define saHpiRdrResourceIsHistorical_Index 2
#define saHpiRdrEntryId_Index 3

#define COLUMN_SAHPIRDRENTRYID 1
#define COLUMN_SAHPIRDRNEXTENTRYID 2
#define COLUMN_SAHPIRDRTYPE 3
#define COLUMN_SAHPIRDRENTITYPATH 4
#define COLUMN_SAHPIRDRISFRU 5
#define COLUMN_SAHPIRDRROWPOINTER 6
#define COLUMN_SAHPIRDRRPT 7
#define COLUMN_SAHPIRDRTEXTTYPE 8
#define COLUMN_SAHPIRDRTEXTLANGUAGE 9
#define COLUMN_SAHPIRDRIDSTRING 10
#define saHpiRdrTable_COL_MIN 1
#define saHpiRdrTable_COL_MAX 10

/* comment out the following line if you don't handle SET-REQUEST for saHpiRdrTable */
#define saHpiRdrTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define saHpiRdrTable_ROW_CREATION

/* comment out the following line if you don't want the secondary index */
#define saHpiRdrTable_IDX2

/* uncommend the following line if you allow modifications to an
 * active row */
/** define saHpiRdrTable_CAN_MODIFY_ACTIVE_ROW */

#ifdef saHpiRdrTable_SET_HANDLING

int saHpiRdrTable_extract_index( saHpiRdrTable_context * ctx, netsnmp_index * hdr );

void saHpiRdrTable_set_reserve1( netsnmp_request_group * );
void saHpiRdrTable_set_reserve2( netsnmp_request_group * );
void saHpiRdrTable_set_action( netsnmp_request_group * );
void saHpiRdrTable_set_commit( netsnmp_request_group * );
void saHpiRdrTable_set_free( netsnmp_request_group * );
void saHpiRdrTable_set_undo( netsnmp_request_group * );

saHpiRdrTable_context * saHpiRdrTable_duplicate_row( saHpiRdrTable_context* );
netsnmp_index * saHpiRdrTable_delete_row( saHpiRdrTable_context* );

int saHpiRdrTable_can_activate(saHpiRdrTable_context *undo_ctx,
                      saHpiRdrTable_context *row_ctx,
                      netsnmp_request_group * rg);
int saHpiRdrTable_can_deactivate(saHpiRdrTable_context *undo_ctx,
                        saHpiRdrTable_context *row_ctx,
                        netsnmp_request_group * rg);
int saHpiRdrTable_can_delete(saHpiRdrTable_context *undo_ctx,
                    saHpiRdrTable_context *row_ctx,
                    netsnmp_request_group * rg);
    
    
#ifdef saHpiRdrTable_ROW_CREATION
saHpiRdrTable_context * saHpiRdrTable_create_row( netsnmp_index* );
#endif
#endif

#ifdef saHpiRdrTable_IDX2
saHpiRdrTable_context * saHpiRdrTable_get( const char *name, int len );
#endif

#ifdef __cplusplus
};
#endif

#endif /** SAHPIRDRTABLE_H */
