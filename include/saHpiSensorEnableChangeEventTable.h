/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.18 2003/11/07 17:03:52 rstory Exp $
 *
 * $Id$
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef SAHPISENSORENABLECHANGEEVENTTABLE_H
#define SAHPISENSORENABLECHANGEEVENTTABLE_H

#ifdef __cplusplus
extern "C" {
#endif

    
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

        /** Index saHpiDomainId is external */
        /** Index saHpiResourceId is external */
        /** Index saHpiSensorNum is external */
        /** Index saHpiEventSeverity is external */
        /** Index saHpiEventHistorical is external */
        /** Index saHpiSensorEnableChangeEventTimestamp is internal */

typedef struct saHpiSensorEnableChangeEventTable_context_s {
    netsnmp_index index; /** THIS MUST BE FIRST!!! */

    /*************************************************************
     * You can store data internally in this structure.
     *
     * TODO: You will probably have to fix a few types here...
     */
    /** TODO: add storage for external index(s)! */
        /** SaHpiTimeString = ASN_OCTET_STR */
            unsigned char saHpiSensorEnableChangeEventTimestamp[65535];
            long saHpiSensorEnableChangeEventTimestamp_len;

        /** INTEGER = ASN_INTEGER */
            long saHpiSensorEnableChangeEventType;

        /** SaHpiEventCategory = ASN_INTEGER */
            long saHpiSensorEnableChangeEventCategory;

        /** TruthValue = ASN_INTEGER */
            long saHpiSensorEnableChangeEnabled;

        /** TruthValue = ASN_INTEGER */
            long saHpiSensorEnableChangeEventsEnabled;

        /** SaHpiEventState = ASN_OCTET_STR */
            unsigned char saHpiSensorEnableChangeAssertEvents[65535];
            long saHpiSensorEnableChangeAssertEvents_len;

        /** SaHpiEventState = ASN_OCTET_STR */
            unsigned char saHpiSensorEnableChangeDeassertEvents[65535];
            long saHpiSensorEnableChangeDeassertEvents_len;

        /** Unsigned8 = ASN_INTEGER */
            long saHpiSensorEnableChangeOptionalData;

        /** SaHpiEventState = ASN_OCTET_STR */
            unsigned char saHpiSensorEnableChangeEventState[65535];
            long saHpiSensorEnableChangeEventState_len;

        /** RowStatus = ASN_INTEGER */
            long saHpiSensorEnableChangeDelete;


    /*
     * OR
     *
     * Keep a pointer to your data
     */
    void * data;

    /*
     *add anything else you want here
     */

} saHpiSensorEnableChangeEventTable_context;

/*************************************************************
 * function declarations
 */
void init_saHpiSensorEnableChangeEventTable(void);
void initialize_table_saHpiSensorEnableChangeEventTable(void);
const saHpiSensorEnableChangeEventTable_context * saHpiSensorEnableChangeEventTable_get_by_idx(netsnmp_index *);
const saHpiSensorEnableChangeEventTable_context * saHpiSensorEnableChangeEventTable_get_by_idx_rs(netsnmp_index *,
                                        int row_status);
int saHpiSensorEnableChangeEventTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);


/*************************************************************
 * oid declarations
 */
extern oid saHpiSensorEnableChangeEventTable_oid[];
extern size_t saHpiSensorEnableChangeEventTable_oid_len;

#define saHpiSensorEnableChangeEventTable_TABLE_OID 1,3,6,1,4,1,18568,1,1,1,6,2,1,10
    
/*************************************************************
 * column number definitions for table saHpiSensorEnableChangeEventTable
 */
#define COLUMN_SAHPISENSORENABLECHANGEEVENTTIMESTAMP 1
#define COLUMN_SAHPISENSORENABLECHANGEEVENTTYPE 2
#define COLUMN_SAHPISENSORENABLECHANGEEVENTCATEGORY 3
#define COLUMN_SAHPISENSORENABLECHANGEENABLED 4
#define COLUMN_SAHPISENSORENABLECHANGEEVENTSENABLED 5
#define COLUMN_SAHPISENSORENABLECHANGEASSERTEVENTS 6
#define COLUMN_SAHPISENSORENABLECHANGEDEASSERTEVENTS 7
#define COLUMN_SAHPISENSORENABLECHANGEOPTIONALDATA 8
#define COLUMN_SAHPISENSORENABLECHANGEEVENTSTATE 9
#define COLUMN_SAHPISENSORENABLECHANGEDELETE 10
#define saHpiSensorEnableChangeEventTable_COL_MIN 1
#define saHpiSensorEnableChangeEventTable_COL_MAX 10

/* comment out the following line if you don't handle SET-REQUEST for saHpiSensorEnableChangeEventTable */
#define saHpiSensorEnableChangeEventTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define saHpiSensorEnableChangeEventTable_ROW_CREATION

/* comment out the following line if you don't want the secondary index */
#define saHpiSensorEnableChangeEventTable_IDX2

/* uncommend the following line if you allow modifications to an
 * active row */
/** define saHpiSensorEnableChangeEventTable_CAN_MODIFY_ACTIVE_ROW */

#ifdef saHpiSensorEnableChangeEventTable_SET_HANDLING

int saHpiSensorEnableChangeEventTable_extract_index( saHpiSensorEnableChangeEventTable_context * ctx, netsnmp_index * hdr );

void saHpiSensorEnableChangeEventTable_set_reserve1( netsnmp_request_group * );
void saHpiSensorEnableChangeEventTable_set_reserve2( netsnmp_request_group * );
void saHpiSensorEnableChangeEventTable_set_action( netsnmp_request_group * );
void saHpiSensorEnableChangeEventTable_set_commit( netsnmp_request_group * );
void saHpiSensorEnableChangeEventTable_set_free( netsnmp_request_group * );
void saHpiSensorEnableChangeEventTable_set_undo( netsnmp_request_group * );

saHpiSensorEnableChangeEventTable_context * saHpiSensorEnableChangeEventTable_duplicate_row( saHpiSensorEnableChangeEventTable_context* );
netsnmp_index * saHpiSensorEnableChangeEventTable_delete_row( saHpiSensorEnableChangeEventTable_context* );

int saHpiSensorEnableChangeEventTable_can_activate(saHpiSensorEnableChangeEventTable_context *undo_ctx,
                      saHpiSensorEnableChangeEventTable_context *row_ctx,
                      netsnmp_request_group * rg);
int saHpiSensorEnableChangeEventTable_can_deactivate(saHpiSensorEnableChangeEventTable_context *undo_ctx,
                        saHpiSensorEnableChangeEventTable_context *row_ctx,
                        netsnmp_request_group * rg);
int saHpiSensorEnableChangeEventTable_can_delete(saHpiSensorEnableChangeEventTable_context *undo_ctx,
                    saHpiSensorEnableChangeEventTable_context *row_ctx,
                    netsnmp_request_group * rg);
    
    
#ifdef saHpiSensorEnableChangeEventTable_ROW_CREATION
saHpiSensorEnableChangeEventTable_context * saHpiSensorEnableChangeEventTable_create_row( netsnmp_index* );
#endif
#endif

#ifdef saHpiSensorEnableChangeEventTable_IDX2
saHpiSensorEnableChangeEventTable_context * saHpiSensorEnableChangeEventTable_get( const char *name, int len );
#endif

#ifdef __cplusplus
};
#endif

#endif /** SAHPISENSORENABLECHANGEEVENTTABLE_H */
