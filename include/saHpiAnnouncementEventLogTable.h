/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.18.2.2 2004/02/09 18:21:47 rstory Exp $
 *
 * $Id$
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef SAHPIANNOUNCEMENTEVENTLOGTABLE_H
#define SAHPIANNOUNCEMENTEVENTLOGTABLE_H

#ifdef __cplusplus
extern "C" {
#endif

    
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

        /** Index saHpiDomainId is external */
        /** Index saHpiResourceId is external */
        /** Index saHpiAnnouncementEntryId is external */

typedef struct saHpiAnnouncementEventLogTable_context_s {
    netsnmp_index index; /** THIS MUST BE FIRST!!! */

    /*************************************************************
     * You can store data internally in this structure.
     *
     * TODO: You will probably have to fix a few types here...
     */
    /** TODO: add storage for external index(s)! */
        /** SaHpiEntryId = ASN_UNSIGNED */
            unsigned long saHpiAnnouncementEventLogEntryId;

        /** SaHpiTime = ASN_COUNTER64 */
    /** TODO: Is this type correct? */
            long saHpiAnnouncementEventLogTimestamp;

        /** TruthValue = ASN_INTEGER */
            long saHpiAnnouncementEventLogAddedByUser;

        /** SaHpiSeverity = ASN_INTEGER */
            long saHpiAnnouncementEventLogSeverity;

        /** TruthValue = ASN_INTEGER */
            long saHpiAnnouncementEventLogAcknowledged;

        /** INTEGER = ASN_INTEGER */
            long saHpiAnnouncementEventLogStatusCondType;

        /** SaHpiEntityPath = ASN_OCTET_STR */
            unsigned char saHpiAnnouncementEventLogEntityPath[65535];
            long saHpiAnnouncementEventLogEntityPath_len;

        /** UNSIGNED32 = ASN_UNSIGNED */
            unsigned long saHpiAnnouncementEventLogSensorNum;

        /** SaHpiEventState = ASN_OCTET_STR */
            unsigned char saHpiAnnouncementEventLogEventState[65535];
            long saHpiAnnouncementEventLogEventState_len;

        /** OCTETSTR = ASN_OCTET_STR */
            unsigned char saHpiAnnouncementEventLogName[65535];
            long saHpiAnnouncementEventLogName_len;

        /** SaHpiManufacturerId = ASN_UNSIGNED */
            unsigned long saHpiAnnouncementEventLogMid;

        /** SaHpiTextType = ASN_INTEGER */
            long saHpiAnnouncementEventLogTextType;

        /** SaHpiTextLanguage = ASN_INTEGER */
            long saHpiAnnouncementEventLogTextLanguage;

        /** SaHpiText = ASN_OCTET_STR */
            unsigned char saHpiAnnouncementEventLogText[65535];
            long saHpiAnnouncementEventLogText_len;

        /** RowStatus = ASN_INTEGER */
            long saHpiAnnouncementEventLogDelete;


    /*
     * OR
     *
     * Keep a pointer to your data
     */
    void * data;

    /*
     *add anything else you want here
     */

} saHpiAnnouncementEventLogTable_context;

/*************************************************************
 * function declarations
 */
void init_saHpiAnnouncementEventLogTable(void);
void initialize_table_saHpiAnnouncementEventLogTable(void);
const saHpiAnnouncementEventLogTable_context * saHpiAnnouncementEventLogTable_get_by_idx(netsnmp_index *);
const saHpiAnnouncementEventLogTable_context * saHpiAnnouncementEventLogTable_get_by_idx_rs(netsnmp_index *,
                                        int row_status);
int saHpiAnnouncementEventLogTable_get_value(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);


/*************************************************************
 * oid declarations
 */
extern oid saHpiAnnouncementEventLogTable_oid[];
extern size_t saHpiAnnouncementEventLogTable_oid_len;

#define saHpiAnnouncementEventLogTable_TABLE_OID 1,3,6,1,4,1,18568,2,1,1,3,2,31
    
/*************************************************************
 * column number definitions for table saHpiAnnouncementEventLogTable
 */
#define COLUMN_SAHPIANNOUNCEMENTEVENTLOGENTRYID 1
#define COLUMN_SAHPIANNOUNCEMENTEVENTLOGTIMESTAMP 2
#define COLUMN_SAHPIANNOUNCEMENTEVENTLOGADDEDBYUSER 3
#define COLUMN_SAHPIANNOUNCEMENTEVENTLOGSEVERITY 4
#define COLUMN_SAHPIANNOUNCEMENTEVENTLOGACKNOWLEDGED 5
#define COLUMN_SAHPIANNOUNCEMENTEVENTLOGSTATUSCONDTYPE 6
#define COLUMN_SAHPIANNOUNCEMENTEVENTLOGENTITYPATH 7
#define COLUMN_SAHPIANNOUNCEMENTEVENTLOGSENSORNUM 8
#define COLUMN_SAHPIANNOUNCEMENTEVENTLOGEVENTSTATE 9
#define COLUMN_SAHPIANNOUNCEMENTEVENTLOGNAME 10
#define COLUMN_SAHPIANNOUNCEMENTEVENTLOGMID 11
#define COLUMN_SAHPIANNOUNCEMENTEVENTLOGTEXTTYPE 12
#define COLUMN_SAHPIANNOUNCEMENTEVENTLOGTEXTLANGUAGE 13
#define COLUMN_SAHPIANNOUNCEMENTEVENTLOGTEXT 14
#define COLUMN_SAHPIANNOUNCEMENTEVENTLOGDELETE 15
#define saHpiAnnouncementEventLogTable_COL_MIN 2
#define saHpiAnnouncementEventLogTable_COL_MAX 15

/* comment out the following line if you don't handle SET-REQUEST for saHpiAnnouncementEventLogTable */
#define saHpiAnnouncementEventLogTable_SET_HANDLING

/* comment out the following line if you can't create new rows */
#define saHpiAnnouncementEventLogTable_ROW_CREATION

/* comment out the following line if you don't want the secondary index */
#define saHpiAnnouncementEventLogTable_IDX2

/* uncommend the following line if you allow modifications to an
 * active row */
/** define saHpiAnnouncementEventLogTable_CAN_MODIFY_ACTIVE_ROW */

#ifdef saHpiAnnouncementEventLogTable_SET_HANDLING

int saHpiAnnouncementEventLogTable_extract_index( saHpiAnnouncementEventLogTable_context * ctx, netsnmp_index * hdr );

void saHpiAnnouncementEventLogTable_set_reserve1( netsnmp_request_group * );
void saHpiAnnouncementEventLogTable_set_reserve2( netsnmp_request_group * );
void saHpiAnnouncementEventLogTable_set_action( netsnmp_request_group * );
void saHpiAnnouncementEventLogTable_set_commit( netsnmp_request_group * );
void saHpiAnnouncementEventLogTable_set_free( netsnmp_request_group * );
void saHpiAnnouncementEventLogTable_set_undo( netsnmp_request_group * );

saHpiAnnouncementEventLogTable_context * saHpiAnnouncementEventLogTable_duplicate_row( saHpiAnnouncementEventLogTable_context* );
netsnmp_index * saHpiAnnouncementEventLogTable_delete_row( saHpiAnnouncementEventLogTable_context* );

int saHpiAnnouncementEventLogTable_can_activate(saHpiAnnouncementEventLogTable_context *undo_ctx,
                      saHpiAnnouncementEventLogTable_context *row_ctx,
                      netsnmp_request_group * rg);
int saHpiAnnouncementEventLogTable_can_deactivate(saHpiAnnouncementEventLogTable_context *undo_ctx,
                        saHpiAnnouncementEventLogTable_context *row_ctx,
                        netsnmp_request_group * rg);
int saHpiAnnouncementEventLogTable_can_delete(saHpiAnnouncementEventLogTable_context *undo_ctx,
                    saHpiAnnouncementEventLogTable_context *row_ctx,
                    netsnmp_request_group * rg);
    
    
#ifdef saHpiAnnouncementEventLogTable_ROW_CREATION
saHpiAnnouncementEventLogTable_context * saHpiAnnouncementEventLogTable_create_row( netsnmp_index* );
#endif
#endif

#ifdef saHpiAnnouncementEventLogTable_IDX2
saHpiAnnouncementEventLogTable_context * saHpiAnnouncementEventLogTable_get( const char *name, int len );
#endif

#ifdef __cplusplus
};
#endif

#endif /** SAHPIANNOUNCEMENTEVENTLOGTABLE_H */
