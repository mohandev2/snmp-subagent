/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.15.2.1 2003/02/27 05:59:41 rstory Exp $
 *
 * $Id$
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef SAHPISENSORSTABLE_H
#define SAHPISENSORSTABLE_H

#ifdef __cplusplus
extern          "C" {
#endif


#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>

        /** Index saHpiSensorsIndex is internal */

    typedef struct saHpiSensorsTable_context_s {
        netsnmp_index   index;
                         /** THIS MUST BE FIRST!!! */

    /*************************************************************
     * You can store data internally in this structure.
     *
     * TODO: You will probably have to fix a few types here...
     */
        /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long   saHpiSensorsIndex;

        /** INTEGER = ASN_INTEGER */
        long            saHpiSensorsType;

        /** INTEGER = ASN_INTEGER */
        long            saHpiSensorsCategory;

        /** INTEGER = ASN_INTEGER */
        long            saHpiSensorsEventsCategoryControl;

        /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long   saHpiSensorsEventsState;

        /** BITS = ASN_OCTET_STR */
        unsigned char   saHpiSensorsIgnore[65535];
        long            saHpiSensorsIgnore_len;

        /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long   saHpiSensorsReadingFormats;

        /** BITS = ASN_OCTET_STR */
        unsigned char   saHpiSensorsIsNumeric[65535];
        long            saHpiSensorsIsNumeric_len;

        /** INTEGER = ASN_INTEGER */
        long            saHpiSensorsSignFormat;

        /** INTEGER = ASN_INTEGER */
        long            saHpiSensorsBaseUnits;

        /** INTEGER = ASN_INTEGER */
        long            saHpiSensorsModifierUnits;

        /** INTEGER = ASN_INTEGER */
        long            saHpiSensorsModifierUse;

        /** BITS = ASN_OCTET_STR */
        unsigned char   saHpiSensorsFactorsStatic[65535];
        long            saHpiSensorsFactorsStatic_len;

        /** OCTETSTR = ASN_OCTET_STR */
        unsigned char   saHpiSensorsFactors[65535];
        long            saHpiSensorsFactors_len;

        /** INTEGER = ASN_INTEGER */
        long            saHpiSensorsFactorsLinearization;

        /** BITS = ASN_OCTET_STR */
        unsigned char   saHpiSensorsPercentage[65535];
        long            saHpiSensorsPercentage_len;

        /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long   saHpiSensorsRangeFlags;

        /** OCTETSTR = ASN_OCTET_STR */
        unsigned char   saHpiSensorsRangeReadingValuesPresent[65535];
        long            saHpiSensorsRangeReadingValuesPresent_len;

        /** OCTETSTR = ASN_OCTET_STR */
        unsigned char   saHpiSensorsRangeReadingRaw[65535];
        long            saHpiSensorsRangeReadingRaw_len;

        /** OCTETSTR = ASN_OCTET_STR */
        unsigned char   saHpiSensorsRangeReadingInterpreted[65535];
        long            saHpiSensorsRangeReadingInterpreted_len;

        /** OCTETSTR = ASN_OCTET_STR */
        unsigned char   saHpiSensorsRangeReadingEventSensor[65535];
        long            saHpiSensorsRangeReadingEventSensor_len;

        /** BITS = ASN_OCTET_STR */
        unsigned char   saHpiSensorsThresholdDefnIsThreshold[65535];
        long            saHpiSensorsThresholdDefnIsThreshold_len;

        /** BITS = ASN_OCTET_STR */
        unsigned char   saHpiSensorsThresholdDefnTholdCapabilities[65535];
        long            saHpiSensorsThresholdDefnTholdCapabilities_len;

        /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long   saHpiSensorsThresholdDefnReadThold;

        /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long   saHpiSensorsThresholdDefnWriteThold;

        /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long   saHpiSensorsThresholdDefnFixedThold;

        /** OCTETSTR = ASN_OCTET_STR */
        unsigned char   saHpiSensorsThresholdRaw[65535];
        long            saHpiSensorsThresholdRaw_len;

        /** OCTETSTR = ASN_OCTET_STR */
        unsigned char   saHpiSensorsThresholdInterpreted[65535];
        long            saHpiSensorsThresholdInterpreted_len;

        /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long   saHpiSensorsOEM;


        /*
         * OR
         *
         * Keep a pointer to your data
         */
        void           *data;

        /*
         *add anything else you want here
         */

    } saHpiSensorsTable_context;

/*************************************************************
 * function declarations
 */
    void            init_saHpiSensorsTable(void);
    void            initialize_table_saHpiSensorsTable(void);
    const saHpiSensorsTable_context
        *saHpiSensorsTable_get_by_idx(netsnmp_index *);
    const saHpiSensorsTable_context
        *saHpiSensorsTable_get_by_idx_rs(netsnmp_index *, int row_status);
    int             saHpiSensorsTable_get_value(netsnmp_request_info *,
                                                netsnmp_index *,
                                                netsnmp_table_request_info
                                                *);


/*************************************************************
 * oid declarations
 */
    extern oid      saHpiSensorsTable_oid[];
    extern size_t   saHpiSensorsTable_oid_len;

#define saHpiSensorsTable_TABLE_OID 1,3,6,1,3,90,3,6

/*************************************************************
 * column number definitions for table saHpiSensorsTable
 */
#define COLUMN_SAHPISENSORSINDEX 1
#define COLUMN_SAHPISENSORSTYPE 2
#define COLUMN_SAHPISENSORSCATEGORY 3
#define COLUMN_SAHPISENSORSEVENTSCATEGORYCONTROL 4
#define COLUMN_SAHPISENSORSEVENTSSTATE 5
#define COLUMN_SAHPISENSORSIGNORE 6
#define COLUMN_SAHPISENSORSREADINGFORMATS 7
#define COLUMN_SAHPISENSORSISNUMERIC 8
#define COLUMN_SAHPISENSORSSIGNFORMAT 9
#define COLUMN_SAHPISENSORSBASEUNITS 10
#define COLUMN_SAHPISENSORSMODIFIERUNITS 11
#define COLUMN_SAHPISENSORSMODIFIERUSE 12
#define COLUMN_SAHPISENSORSFACTORSSTATIC 13
#define COLUMN_SAHPISENSORSFACTORS 14
#define COLUMN_SAHPISENSORSFACTORSLINEARIZATION 15
#define COLUMN_SAHPISENSORSPERCENTAGE 16
#define COLUMN_SAHPISENSORSRANGEFLAGS 17
#define COLUMN_SAHPISENSORSRANGEREADINGVALUESPRESENT 18
#define COLUMN_SAHPISENSORSRANGEREADINGRAW 19
#define COLUMN_SAHPISENSORSRANGEREADINGINTERPRETED 20
#define COLUMN_SAHPISENSORSRANGEREADINGEVENTSENSOR 21
#define COLUMN_SAHPISENSORSTHRESHOLDDEFNISTHRESHOLD 22
#define COLUMN_SAHPISENSORSTHRESHOLDDEFNTHOLDCAPABILITIES 23
#define COLUMN_SAHPISENSORSTHRESHOLDDEFNREADTHOLD 24
#define COLUMN_SAHPISENSORSTHRESHOLDDEFNWRITETHOLD 25
#define COLUMN_SAHPISENSORSTHRESHOLDDEFNFIXEDTHOLD 26
#define COLUMN_SAHPISENSORSTHRESHOLDRAW 27
#define COLUMN_SAHPISENSORSTHRESHOLDINTERPRETED 28
#define COLUMN_SAHPISENSORSOEM 29
#define saHpiSensorsTable_COL_MIN 1
#define saHpiSensorsTable_COL_MAX 29

    /*
     * comment out the following line if you don't handle SET-REQUEST for saHpiSensorsTable 
     */
#define saHpiSensorsTable_SET_HANDLING

    /*
     * comment out the following line if you can't create new rows 
     */
#define saHpiSensorsTable_ROW_CREATION

    /*
     * comment out the following line if you don't want the secondary index 
     */
#define saHpiSensorsTable_IDX2

#ifdef saHpiSensorsTable_SET_HANDLING

    int            
        saHpiSensorsTable_extract_index(saHpiSensorsTable_context * ctx,
                                        netsnmp_index * hdr);

    void            saHpiSensorsTable_set_reserve1(netsnmp_request_group
                                                   *);
    void            saHpiSensorsTable_set_reserve2(netsnmp_request_group
                                                   *);
    void            saHpiSensorsTable_set_action(netsnmp_request_group *);
    void            saHpiSensorsTable_set_commit(netsnmp_request_group *);
    void            saHpiSensorsTable_set_free(netsnmp_request_group *);
    void            saHpiSensorsTable_set_undo(netsnmp_request_group *);

    saHpiSensorsTable_context
        *saHpiSensorsTable_duplicate_row(saHpiSensorsTable_context *);
    netsnmp_index  *saHpiSensorsTable_delete_row(saHpiSensorsTable_context
                                                 *);

    int             saHpiSensorsTable_can_delete(saHpiSensorsTable_context
                                                 * undo_ctx,
                                                 saHpiSensorsTable_context
                                                 * row_ctx,
                                                 netsnmp_request_group *
                                                 rg);


#ifdef saHpiSensorsTable_ROW_CREATION
    saHpiSensorsTable_context *saHpiSensorsTable_create_row(netsnmp_index
                                                            *);
#endif
#endif

#ifdef saHpiSensorsTable_IDX2
    saHpiSensorsTable_context *saHpiSensorsTable_get(const char *name,
                                                     int len);
#endif

#ifdef __cplusplus
};
#endif

#endif /** SAHPISENSORSTABLE_H */
