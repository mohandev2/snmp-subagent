/*
 * (C) Copyright IBM Corp. 2003
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  This
 * file and program are licensed under a BSD style license.  See
 * the Copying file included with the OpenHPI distribution for
 * full licensing terms.
 *
 * Authors:
 *   Konrad Rzeszutek <konradr@us.ibm.com>
 *
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.array-user.conf,v 5.15.2.1 2003/02/27 05:59:41 rstory Exp $
 *
 * $Id$
 *
 * Yes, there is lots of code here that you might not use. But it is much
 * easier to remove code than to add it!
 */
#ifndef SAHPITABLE_H
#define SAHPITABLE_H

#ifdef __cplusplus
extern          "C" {
#endif

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/library/container.h>
#include <net-snmp/agent/table_array.h>
#include <SaHpi.h>
#include <hpiSubagent.h>

  /* 
   * Max values defined in the the MIB
   */

#define SAHPI_RESOURCE_TAG_MAX 255

    typedef struct saHpiTable_context_s {
        netsnmp_index   index;

        /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long   saHpiDomainID;

        /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long   saHpiEntryID;

        /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long   saHpiResourceID;

        /** OCTETSTR = ASN_OCTET_STR */
        unsigned char   saHpiResourceEntityPath[SNMP_MAX_MSG_SIZE];
        long            saHpiResourceEntityPath_len;

        /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long   saHpiResourceCapabilities;

        /** INTEGER = ASN_INTEGER */
        long            saHpiResourceSeverity;

        /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long   saHpiResourceInfoResourceRev;

        /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long   saHpiResourceInfoSpecificVer;

        /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long   saHpiResourceInfoDeviceSupport;

        /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long   saHpiResourceInfoManufacturerId;

        /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long   saHpiResourceInfoProductId;

        /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long   saHpiResourceInfoFirmwareMajorRev;

        /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long   saHpiResourceInfoFirmwareMinorRev;

        /** UNSIGNED32 = ASN_UNSIGNED */
        unsigned long   saHpiResourceInfoAuxFirmwareRev;

        /** INTEGER = ASN_INTEGER */
        long            saHpiResourceTagTextType;

        /** INTEGER = ASN_INTEGER */
        long            saHpiResourceTagTextLanguage;

        /** OCTETSTR = ASN_OCTET_STR */
        unsigned char   saHpiResourceTag[SAHPI_RESOURCE_TAG_MAX];
        long            saHpiResourceTag_len;

      long  hash;
	long resource_id;

    } saHpiTable_context;

/*************************************************************
 * function declarations
 */

    void            initialize_table_saHpiTable(void);
  //    const saHpiTable_context *saHpiTable_get_by_idx(netsnmp_index *);
  /*
    const saHpiTable_context *saHpiTable_get_by_idx_rs(netsnmp_index *,
                                                       int row_status);
  */
    int             saHpiTable_get_value(netsnmp_request_info *,
                                         netsnmp_index *,
                                         netsnmp_table_request_info *);

  int populate_rpt();
int
set_table_severity(saHpiTable_context *ctx);
int
set_table_tag(saHpiTable_context *ctx);


int
delete_rpt_row(SaHpiDomainIdT domain_id,
	       SaHpiResourceIdT resource_id,
	       SaHpiEntryIdT num);
int  
saHpiTable_modify_context(SaHpiRptEntryT *entry, 
				saHpiTable_context *ctx
				);

  int send_saHpiTable_notification(saHpiTable_context *ctx);
void
make_SaHpiTable_trap_msg(netsnmp_variable_list *list, 
	      netsnmp_index *index,
	      int column, 
	      u_char type,
	      const u_char *value, 
	      const size_t value_len);
int
update_timestamp_handler(netsnmp_mib_handler *handler,
			 netsnmp_handler_registration *reginfo,
			 netsnmp_agent_request_info *reqinfo,
			 netsnmp_request_info *requests);
/*************************************************************
 * oid declarations
 */
    extern oid      saHpiTable_oid[];
    extern size_t   saHpiTable_oid_len;

  //1,3,6,1,3,90,1,4

#define saHpiTable_TABLE_OID hpiEntity_OID,4

#define SCALAR_COLUMN_SAHPIENTRYUPDATETIMESTAMP 3
#define SCALAR_COLUMN_SAHPIENTRYUPDATECOUNT 2
#define SCALAR_COLUMN_SAHPIENTRYCOUNT 1

/*************************************************************
 * column number definitions for table saHpiTable
 */
#define COLUMN_SAHPIDOMAINID 1
#define COLUMN_SAHPIENTRYID 2
#define COLUMN_SAHPIRESOURCEID 3
#define COLUMN_SAHPIRESOURCEENTITYPATH 4
#define COLUMN_SAHPIRESOURCECAPABILITIES 5
#define COLUMN_SAHPIRESOURCESEVERITY 6
#define COLUMN_SAHPIRESOURCEINFORESOURCEREV 7
#define COLUMN_SAHPIRESOURCEINFOSPECIFICVER 8
#define COLUMN_SAHPIRESOURCEINFODEVICESUPPORT 9
#define COLUMN_SAHPIRESOURCEINFOMANUFACTURERID 10
#define COLUMN_SAHPIRESOURCEINFOPRODUCTID 11
#define COLUMN_SAHPIRESOURCEINFOFIRMWAREMAJORREV 12
#define COLUMN_SAHPIRESOURCEINFOFIRMWAREMINORREV 13
#define COLUMN_SAHPIRESOURCEINFOAUXFIRMWAREREV 14
#define COLUMN_SAHPIRESOURCETAGTEXTTYPE 15
#define COLUMN_SAHPIRESOURCETAGTEXTLANGUAGE 16
#define COLUMN_SAHPIRESOURCETAG 17
#define saHpiTable_COL_MIN 1
#define saHpiTable_COL_MAX 17

    /*
     * comment out the following line if you don't handle SET-REQUEST for saHpiTable 
     */
#define saHpiTable_SET_HANDLING

    /*
     * comment out the following line if you can't create new rows 
     */
#define saHpiTable_ROW_CREATION

    /*
     * comment out the following line if you don't want the secondary index 
     */
#define saHpiTable_IDX2


    int             saHpiTable_extract_index(saHpiTable_context * ctx,
                                             netsnmp_index * hdr);

    void            saHpiTable_set_reserve1(netsnmp_request_group *);
    void            saHpiTable_set_reserve2(netsnmp_request_group *);
    void            saHpiTable_set_action(netsnmp_request_group *);
    void            saHpiTable_set_commit(netsnmp_request_group *);
    void            saHpiTable_set_free(netsnmp_request_group *);
    void            saHpiTable_set_undo(netsnmp_request_group *);

    saHpiTable_context *saHpiTable_duplicate_row(saHpiTable_context *);
    netsnmp_index  *saHpiTable_delete_row(saHpiTable_context *);

    int             saHpiTable_can_delete(saHpiTable_context * undo_ctx,
                                          saHpiTable_context * row_ctx,
                                          netsnmp_request_group * rg);


    saHpiTable_context *saHpiTable_create_row(netsnmp_index *);

    saHpiTable_context *saHpiTable_get(const char *name, int len);

#ifdef __cplusplus
};
#endif

#endif /** SAHPITABLE_H */
